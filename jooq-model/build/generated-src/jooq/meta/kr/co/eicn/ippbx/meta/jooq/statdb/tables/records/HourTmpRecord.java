/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.statdb.tables.records;


import kr.co.eicn.ippbx.meta.jooq.statdb.tables.HourTmp;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HourTmpRecord extends TableRecordImpl<HourTmpRecord> implements Record3<Byte, Integer, Integer> {

    private static final long serialVersionUID = -104569347;

    /**
     * Setter for <code>STATDB.hour_tmp.stat_hour</code>.
     */
    public HourTmpRecord setStatHour(Byte value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>STATDB.hour_tmp.stat_hour</code>.
     */
    public Byte getStatHour() {
        return (Byte) get(0);
    }

    /**
     * Setter for <code>STATDB.hour_tmp.in_total</code>.
     */
    public HourTmpRecord setInTotal(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>STATDB.hour_tmp.in_total</code>.
     */
    public Integer getInTotal() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>STATDB.hour_tmp.out_total</code>.
     */
    public HourTmpRecord setOutTotal(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>STATDB.hour_tmp.out_total</code>.
     */
    public Integer getOutTotal() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Byte, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Byte, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Byte> field1() {
        return HourTmp.HOUR_TMP.STAT_HOUR;
    }

    @Override
    public Field<Integer> field2() {
        return HourTmp.HOUR_TMP.IN_TOTAL;
    }

    @Override
    public Field<Integer> field3() {
        return HourTmp.HOUR_TMP.OUT_TOTAL;
    }

    @Override
    public Byte component1() {
        return getStatHour();
    }

    @Override
    public Integer component2() {
        return getInTotal();
    }

    @Override
    public Integer component3() {
        return getOutTotal();
    }

    @Override
    public Byte value1() {
        return getStatHour();
    }

    @Override
    public Integer value2() {
        return getInTotal();
    }

    @Override
    public Integer value3() {
        return getOutTotal();
    }

    @Override
    public HourTmpRecord value1(Byte value) {
        setStatHour(value);
        return this;
    }

    @Override
    public HourTmpRecord value2(Integer value) {
        setInTotal(value);
        return this;
    }

    @Override
    public HourTmpRecord value3(Integer value) {
        setOutTotal(value);
        return this;
    }

    @Override
    public HourTmpRecord values(Byte value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HourTmpRecord
     */
    public HourTmpRecord() {
        super(HourTmp.HOUR_TMP);
    }

    /**
     * Create a detached, initialised HourTmpRecord
     */
    public HourTmpRecord(Byte statHour, Integer inTotal, Integer outTotal) {
        super(HourTmp.HOUR_TMP);

        set(0, statHour);
        set(1, inTotal);
        set(2, outTotal);
    }
}
