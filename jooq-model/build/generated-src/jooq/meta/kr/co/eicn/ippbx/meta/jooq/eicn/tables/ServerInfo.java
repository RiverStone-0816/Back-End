/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ServerInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 프로젝트별 서버정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerInfo extends TableImpl<ServerInfoRecord> {

    private static final long serialVersionUID = 1534259643;

    /**
     * The reference instance of <code>eicn.server_info</code>
     */
    public static final ServerInfo SERVER_INFO = new ServerInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerInfoRecord> getRecordType() {
        return ServerInfoRecord.class;
    }

    /**
     * The column <code>eicn.server_info.host</code>. 호스트명
     */
    public final TableField<ServerInfoRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "호스트명");

    /**
     * The column <code>eicn.server_info.name</code>. 서버 한글표기명
     */
    public final TableField<ServerInfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버 한글표기명");

    /**
     * The column <code>eicn.server_info.type</code>. 타입
 * W:웹서버, P:PBX서버, V:웹보이스중계서버, K:상담톡릴레이서버, S:SMS서버
 * R:녹취서버, T:TTS서버, C:웹컨텐츠서버
     */
    public final TableField<ServerInfoRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("P", org.jooq.impl.SQLDataType.VARCHAR)), this, "타입\r\n * W:웹서버, P:PBX서버, V:웹보이스중계서버, K:상담톡릴레이서버, S:SMS서버\r\n * R:녹취서버, T:TTS서버, C:웹컨텐츠서버");

    /**
     * The column <code>eicn.server_info.domain</code>.
     */
    public final TableField<ServerInfoRecord, String> DOMAIN = createField(DSL.name("domain"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.server_info.is_use</code>. 사용여부
     */
    public final TableField<ServerInfoRecord, String> IS_USE = createField(DSL.name("is_use"), org.jooq.impl.SQLDataType.VARCHAR(5).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "사용여부");

    /**
     * The column <code>eicn.server_info.use_ha</code>. HA사용여부Y/N
     */
    public final TableField<ServerInfoRecord, String> USE_HA = createField(DSL.name("use_ha"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "HA사용여부Y/N");

    /**
     * The column <code>eicn.server_info.use_ssl</code>. HA사용여부http/https
     */
    public final TableField<ServerInfoRecord, String> USE_SSL = createField(DSL.name("use_ssl"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "HA사용여부http/https");

    /**
     * The column <code>eicn.server_info.ip</code>. IP 값
     */
    public final TableField<ServerInfoRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "IP 값");

    /**
     * The column <code>eicn.server_info.ip1</code>. 1번IP
     */
    public final TableField<ServerInfoRecord, String> IP1 = createField(DSL.name("ip1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "1번IP");

    /**
     * The column <code>eicn.server_info.ip2</code>. 2번IP
     */
    public final TableField<ServerInfoRecord, String> IP2 = createField(DSL.name("ip2"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "2번IP");

    /**
     * The column <code>eicn.server_info.inner_ip</code>. 내부IP
     */
    public final TableField<ServerInfoRecord, String> INNER_IP = createField(DSL.name("inner_ip"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "내부IP");

    /**
     * The column <code>eicn.server_info.inner_ip1</code>.
     */
    public final TableField<ServerInfoRecord, String> INNER_IP1 = createField(DSL.name("inner_ip1"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.server_info.inner_ip2</code>.
     */
    public final TableField<ServerInfoRecord, String> INNER_IP2 = createField(DSL.name("inner_ip2"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.server_info</code> table reference
     */
    public ServerInfo() {
        this(DSL.name("server_info"), null);
    }

    /**
     * Create an aliased <code>eicn.server_info</code> table reference
     */
    public ServerInfo(String alias) {
        this(DSL.name(alias), SERVER_INFO);
    }

    /**
     * Create an aliased <code>eicn.server_info</code> table reference
     */
    public ServerInfo(Name alias) {
        this(alias, SERVER_INFO);
    }

    private ServerInfo(Name alias, Table<ServerInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerInfo(Name alias, Table<ServerInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("프로젝트별 서버정보"), TableOptions.table());
    }

    public <O extends Record> ServerInfo(Table<O> child, ForeignKey<O, ServerInfoRecord> key) {
        super(child, key, SERVER_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVER_INFO_IP);
    }

    @Override
    public List<UniqueKey<ServerInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerInfoRecord>>asList(Keys.KEY_SERVER_INFO_HOST);
    }

    @Override
    public ServerInfo as(String alias) {
        return new ServerInfo(DSL.name(alias), this);
    }

    @Override
    public ServerInfo as(Name alias) {
        return new ServerInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerInfo rename(String name) {
        return new ServerInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerInfo rename(Name name) {
        return new ServerInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
