/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.DashboardViewListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardViewList extends TableImpl<DashboardViewListRecord> {

    private static final long serialVersionUID = -1210332450;

    /**
     * The reference instance of <code>eicn.dashboard_view_list</code>
     */
    public static final DashboardViewList DASHBOARD_VIEW_LIST = new DashboardViewList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardViewListRecord> getRecordType() {
        return DashboardViewListRecord.class;
    }

    /**
     * The column <code>eicn.dashboard_view_list.seq</code>.
     */
    public final TableField<DashboardViewListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.dashboard_view_list.dashboard_info_id</code>.
     */
    public final TableField<DashboardViewListRecord, Integer> DASHBOARD_INFO_ID = createField(DSL.name("dashboard_info_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.dashboard_view_list.company_id</code>.
     */
    public final TableField<DashboardViewListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("\"\"", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.dashboard_view_list</code> table reference
     */
    public DashboardViewList() {
        this(DSL.name("dashboard_view_list"), null);
    }

    /**
     * Create an aliased <code>eicn.dashboard_view_list</code> table reference
     */
    public DashboardViewList(String alias) {
        this(DSL.name(alias), DASHBOARD_VIEW_LIST);
    }

    /**
     * Create an aliased <code>eicn.dashboard_view_list</code> table reference
     */
    public DashboardViewList(Name alias) {
        this(alias, DASHBOARD_VIEW_LIST);
    }

    private DashboardViewList(Name alias, Table<DashboardViewListRecord> aliased) {
        this(alias, aliased, null);
    }

    private DashboardViewList(Name alias, Table<DashboardViewListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DashboardViewList(Table<O> child, ForeignKey<O, DashboardViewListRecord> key) {
        super(child, key, DASHBOARD_VIEW_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<DashboardViewListRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_VIEW_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardViewListRecord>> getKeys() {
        return Arrays.<UniqueKey<DashboardViewListRecord>>asList(Keys.KEY_DASHBOARD_VIEW_LIST_PRIMARY);
    }

    @Override
    public DashboardViewList as(String alias) {
        return new DashboardViewList(DSL.name(alias), this);
    }

    @Override
    public DashboardViewList as(Name alias) {
        return new DashboardViewList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardViewList rename(String name) {
        return new DashboardViewList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardViewList rename(Name name) {
        return new DashboardViewList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
