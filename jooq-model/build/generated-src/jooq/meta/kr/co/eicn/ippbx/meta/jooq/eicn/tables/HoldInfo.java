/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.HoldInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HoldInfo extends TableImpl<HoldInfoRecord> {

    private static final long serialVersionUID = -21880031;

    /**
     * The reference instance of <code>eicn.hold_info</code>
     */
    public static final HoldInfo HOLD_INFO = new HoldInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HoldInfoRecord> getRecordType() {
        return HoldInfoRecord.class;
    }

    /**
     * The column <code>eicn.hold_info.peer</code>.
     */
    public final TableField<HoldInfoRecord, String> PEER = createField(DSL.name("peer"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.hold_info.channel</code>.
     */
    public final TableField<HoldInfoRecord, String> CHANNEL = createField(DSL.name("channel"), org.jooq.impl.SQLDataType.VARCHAR(70).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.hold_info</code> table reference
     */
    public HoldInfo() {
        this(DSL.name("hold_info"), null);
    }

    /**
     * Create an aliased <code>eicn.hold_info</code> table reference
     */
    public HoldInfo(String alias) {
        this(DSL.name(alias), HOLD_INFO);
    }

    /**
     * Create an aliased <code>eicn.hold_info</code> table reference
     */
    public HoldInfo(Name alias) {
        this(alias, HOLD_INFO);
    }

    private HoldInfo(Name alias, Table<HoldInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private HoldInfo(Name alias, Table<HoldInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> HoldInfo(Table<O> child, ForeignKey<O, HoldInfoRecord> key) {
        super(child, key, HOLD_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<HoldInfoRecord> getPrimaryKey() {
        return Keys.KEY_HOLD_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<HoldInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<HoldInfoRecord>>asList(Keys.KEY_HOLD_INFO_PRIMARY);
    }

    @Override
    public HoldInfo as(String alias) {
        return new HoldInfo(DSL.name(alias), this);
    }

    @Override
    public HoldInfo as(Name alias) {
        return new HoldInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HoldInfo rename(String name) {
        return new HoldInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HoldInfo rename(Name name) {
        return new HoldInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
