/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.BasicFunctionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BasicFunction extends TableImpl<BasicFunctionRecord> {

    private static final long serialVersionUID = -803523268;

    /**
     * The reference instance of <code>eicn.basic_function</code>
     */
    public static final BasicFunction BASIC_FUNCTION = new BasicFunction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BasicFunctionRecord> getRecordType() {
        return BasicFunctionRecord.class;
    }

    /**
     * The column <code>eicn.basic_function.seq</code>.
     */
    public final TableField<BasicFunctionRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.basic_function.func_id</code>.
     */
    public final TableField<BasicFunctionRecord, String> FUNC_ID = createField(DSL.name("func_id"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.basic_function.func_name</code>.
     */
    public final TableField<BasicFunctionRecord, String> FUNC_NAME = createField(DSL.name("func_name"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.basic_function.func_dash_jsp</code>.
     */
    public final TableField<BasicFunctionRecord, String> FUNC_DASH_JSP = createField(DSL.name("func_dash_jsp"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.basic_function.func_display_jsp</code>.
     */
    public final TableField<BasicFunctionRecord, String> FUNC_DISPLAY_JSP = createField(DSL.name("func_display_jsp"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.basic_function.is_use</code>.
     */
    public final TableField<BasicFunctionRecord, String> IS_USE = createField(DSL.name("is_use"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.basic_function.info</code>.
     */
    public final TableField<BasicFunctionRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.basic_function</code> table reference
     */
    public BasicFunction() {
        this(DSL.name("basic_function"), null);
    }

    /**
     * Create an aliased <code>eicn.basic_function</code> table reference
     */
    public BasicFunction(String alias) {
        this(DSL.name(alias), BASIC_FUNCTION);
    }

    /**
     * Create an aliased <code>eicn.basic_function</code> table reference
     */
    public BasicFunction(Name alias) {
        this(alias, BASIC_FUNCTION);
    }

    private BasicFunction(Name alias, Table<BasicFunctionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BasicFunction(Name alias, Table<BasicFunctionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BasicFunction(Table<O> child, ForeignKey<O, BasicFunctionRecord> key) {
        super(child, key, BASIC_FUNCTION);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<BasicFunctionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BASIC_FUNCTION;
    }

    @Override
    public List<UniqueKey<BasicFunctionRecord>> getKeys() {
        return Arrays.<UniqueKey<BasicFunctionRecord>>asList(Keys.KEY_BASIC_FUNCTION_SEQ);
    }

    @Override
    public BasicFunction as(String alias) {
        return new BasicFunction(DSL.name(alias), this);
    }

    @Override
    public BasicFunction as(Name alias) {
        return new BasicFunction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BasicFunction rename(String name) {
        return new BasicFunction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BasicFunction rename(Name name) {
        return new BasicFunction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
