/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RecordDownInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordDownInfo extends TableImpl<RecordDownInfoRecord> {

    private static final long serialVersionUID = -412928619;

    /**
     * The reference instance of <code>eicn.record_down_info</code>
     */
    public static final RecordDownInfo RECORD_DOWN_INFO = new RecordDownInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordDownInfoRecord> getRecordType() {
        return RecordDownInfoRecord.class;
    }

    /**
     * The column <code>eicn.record_down_info.seq</code>.
     */
    public final TableField<RecordDownInfoRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.record_down_info.parent</code>.
     */
    public final TableField<RecordDownInfoRecord, Integer> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.record_down_info.host</code>.
     */
    public final TableField<RecordDownInfoRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_down_info.org_file</code>.
     */
    public final TableField<RecordDownInfoRecord, String> ORG_FILE = createField(DSL.name("org_file"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_down_info.saveas_file</code>.
     */
    public final TableField<RecordDownInfoRecord, String> SAVEAS_FILE = createField(DSL.name("saveas_file"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_down_info.status</code>.
     */
    public final TableField<RecordDownInfoRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("A", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.record_down_info.company_id</code>.
     */
    public final TableField<RecordDownInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.record_down_info</code> table reference
     */
    public RecordDownInfo() {
        this(DSL.name("record_down_info"), null);
    }

    /**
     * Create an aliased <code>eicn.record_down_info</code> table reference
     */
    public RecordDownInfo(String alias) {
        this(DSL.name(alias), RECORD_DOWN_INFO);
    }

    /**
     * Create an aliased <code>eicn.record_down_info</code> table reference
     */
    public RecordDownInfo(Name alias) {
        this(alias, RECORD_DOWN_INFO);
    }

    private RecordDownInfo(Name alias, Table<RecordDownInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecordDownInfo(Name alias, Table<RecordDownInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RecordDownInfo(Table<O> child, ForeignKey<O, RecordDownInfoRecord> key) {
        super(child, key, RECORD_DOWN_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECORD_DOWN_INFO_PARENT);
    }

    @Override
    public Identity<RecordDownInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECORD_DOWN_INFO;
    }

    @Override
    public List<UniqueKey<RecordDownInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordDownInfoRecord>>asList(Keys.KEY_RECORD_DOWN_INFO_SEQ);
    }

    @Override
    public RecordDownInfo as(String alias) {
        return new RecordDownInfo(DSL.name(alias), this);
    }

    @Override
    public RecordDownInfo as(Name alias) {
        return new RecordDownInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordDownInfo rename(String name) {
        return new RecordDownInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordDownInfo rename(Name name) {
        return new RecordDownInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
