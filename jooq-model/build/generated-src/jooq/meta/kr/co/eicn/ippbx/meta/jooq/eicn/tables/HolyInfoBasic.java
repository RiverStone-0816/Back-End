/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.HolyInfoBasicRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HolyInfoBasic extends TableImpl<HolyInfoBasicRecord> {

    private static final long serialVersionUID = 792646582;

    /**
     * The reference instance of <code>eicn.holy_info_basic</code>
     */
    public static final HolyInfoBasic HOLY_INFO_BASIC = new HolyInfoBasic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HolyInfoBasicRecord> getRecordType() {
        return HolyInfoBasicRecord.class;
    }

    /**
     * The column <code>eicn.holy_info_basic.seq</code>.
     */
    public final TableField<HolyInfoBasicRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.holy_info_basic.holy_name</code>.
     */
    public final TableField<HolyInfoBasicRecord, String> HOLY_NAME = createField(DSL.name("holy_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.holy_info_basic.holy_date</code>. 휴일월일
     */
    public final TableField<HolyInfoBasicRecord, String> HOLY_DATE = createField(DSL.name("holy_date"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "휴일월일");

    /**
     * The column <code>eicn.holy_info_basic.lunar_yn</code>. 음력여부
     */
    public final TableField<HolyInfoBasicRecord, String> LUNAR_YN = createField(DSL.name("lunar_yn"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "음력여부");

    /**
     * The column <code>eicn.holy_info_basic.company_id</code>.
     */
    public final TableField<HolyInfoBasicRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.holy_info_basic</code> table reference
     */
    public HolyInfoBasic() {
        this(DSL.name("holy_info_basic"), null);
    }

    /**
     * Create an aliased <code>eicn.holy_info_basic</code> table reference
     */
    public HolyInfoBasic(String alias) {
        this(DSL.name(alias), HOLY_INFO_BASIC);
    }

    /**
     * Create an aliased <code>eicn.holy_info_basic</code> table reference
     */
    public HolyInfoBasic(Name alias) {
        this(alias, HOLY_INFO_BASIC);
    }

    private HolyInfoBasic(Name alias, Table<HolyInfoBasicRecord> aliased) {
        this(alias, aliased, null);
    }

    private HolyInfoBasic(Name alias, Table<HolyInfoBasicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> HolyInfoBasic(Table<O> child, ForeignKey<O, HolyInfoBasicRecord> key) {
        super(child, key, HOLY_INFO_BASIC);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<HolyInfoBasicRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HOLY_INFO_BASIC;
    }

    @Override
    public List<UniqueKey<HolyInfoBasicRecord>> getKeys() {
        return Arrays.<UniqueKey<HolyInfoBasicRecord>>asList(Keys.KEY_HOLY_INFO_BASIC_SEQ);
    }

    @Override
    public HolyInfoBasic as(String alias) {
        return new HolyInfoBasic(DSL.name(alias), this);
    }

    @Override
    public HolyInfoBasic as(Name alias) {
        return new HolyInfoBasic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HolyInfoBasic rename(String name) {
        return new HolyInfoBasic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HolyInfoBasic rename(Name name) {
        return new HolyInfoBasic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
