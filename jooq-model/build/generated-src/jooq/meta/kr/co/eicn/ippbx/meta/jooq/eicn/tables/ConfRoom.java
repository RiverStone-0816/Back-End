/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ConfRoomRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfRoom extends TableImpl<ConfRoomRecord> {

    private static final long serialVersionUID = 1029440853;

    /**
     * The reference instance of <code>eicn.conf_room</code>
     */
    public static final ConfRoom CONF_ROOM = new ConfRoom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfRoomRecord> getRecordType() {
        return ConfRoomRecord.class;
    }

    /**
     * The column <code>eicn.conf_room.seq</code>.
     */
    public final TableField<ConfRoomRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.conf_room.room_name</code>.
     */
    public final TableField<ConfRoomRecord, String> ROOM_NAME = createField(DSL.name("room_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_room.room_number</code>.
     */
    public final TableField<ConfRoomRecord, String> ROOM_NUMBER = createField(DSL.name("room_number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_room.room_cid</code>.
     */
    public final TableField<ConfRoomRecord, String> ROOM_CID = createField(DSL.name("room_cid"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_room.room_short_num</code>.
     */
    public final TableField<ConfRoomRecord, String> ROOM_SHORT_NUM = createField(DSL.name("room_short_num"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_room.group_code</code>. 같은 group_level 에서 unique한 코드 4자리 ex&gt;0001
     */
    public final TableField<ConfRoomRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "같은 group_level 에서 unique한 코드 4자리 ex>0001");

    /**
     * The column <code>eicn.conf_room.group_tree_name</code>. 윗레벨의 코드를 포함한 코드의 나열 ex&gt;0003_0008_0001
     */
    public final TableField<ConfRoomRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 코드를 포함한 코드의 나열 ex>0003_0008_0001");

    /**
     * The column <code>eicn.conf_room.group_level</code>. 해당조직의 레벨 MAX 보다 같거나 작을것
     */
    public final TableField<ConfRoomRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "해당조직의 레벨 MAX 보다 같거나 작을것");

    /**
     * The column <code>eicn.conf_room.company_id</code>.
     */
    public final TableField<ConfRoomRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.conf_room</code> table reference
     */
    public ConfRoom() {
        this(DSL.name("conf_room"), null);
    }

    /**
     * Create an aliased <code>eicn.conf_room</code> table reference
     */
    public ConfRoom(String alias) {
        this(DSL.name(alias), CONF_ROOM);
    }

    /**
     * Create an aliased <code>eicn.conf_room</code> table reference
     */
    public ConfRoom(Name alias) {
        this(alias, CONF_ROOM);
    }

    private ConfRoom(Name alias, Table<ConfRoomRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConfRoom(Name alias, Table<ConfRoomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ConfRoom(Table<O> child, ForeignKey<O, ConfRoomRecord> key) {
        super(child, key, CONF_ROOM);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<ConfRoomRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONF_ROOM;
    }

    @Override
    public List<UniqueKey<ConfRoomRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfRoomRecord>>asList(Keys.KEY_CONF_ROOM_SEQ);
    }

    @Override
    public ConfRoom as(String alias) {
        return new ConfRoom(DSL.name(alias), this);
    }

    @Override
    public ConfRoom as(Name alias) {
        return new ConfRoom(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfRoom rename(String name) {
        return new ConfRoom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfRoom rename(Name name) {
        return new ConfRoom(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
