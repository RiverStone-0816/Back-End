/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.MultichannelSmsHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultichannelSmsHistory extends TableImpl<MultichannelSmsHistoryRecord> {

    private static final long serialVersionUID = 1028155614;

    /**
     * The reference instance of <code>eicn.multichannel_sms_history</code>
     */
    public static final MultichannelSmsHistory MULTICHANNEL_SMS_HISTORY = new MultichannelSmsHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultichannelSmsHistoryRecord> getRecordType() {
        return MultichannelSmsHistoryRecord.class;
    }

    /**
     * The column <code>eicn.multichannel_sms_history.seq</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, UInteger> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.list_seq</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, UInteger> LIST_SEQ = createField(DSL.name("list_seq"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.status</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.send_status</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> SEND_STATUS = createField(DSL.name("send_status"), org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.insert_date</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, Timestamp> INSERT_DATE = createField(DSL.name("insert_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.update_date</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, Timestamp> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.userid</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.username</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.send_number</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> SEND_NUMBER = createField(DSL.name("send_number"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.recv_number</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> RECV_NUMBER = createField(DSL.name("recv_number"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.reply_message</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> REPLY_MESSAGE = createField(DSL.name("reply_message"), org.jooq.impl.SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.content</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.update_userid</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> UPDATE_USERID = createField(DSL.name("update_userid"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>eicn.multichannel_sms_history.company_id</code>.
     */
    public final TableField<MultichannelSmsHistoryRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>eicn.multichannel_sms_history</code> table reference
     */
    public MultichannelSmsHistory() {
        this(DSL.name("multichannel_sms_history"), null);
    }

    /**
     * Create an aliased <code>eicn.multichannel_sms_history</code> table reference
     */
    public MultichannelSmsHistory(String alias) {
        this(DSL.name(alias), MULTICHANNEL_SMS_HISTORY);
    }

    /**
     * Create an aliased <code>eicn.multichannel_sms_history</code> table reference
     */
    public MultichannelSmsHistory(Name alias) {
        this(alias, MULTICHANNEL_SMS_HISTORY);
    }

    private MultichannelSmsHistory(Name alias, Table<MultichannelSmsHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultichannelSmsHistory(Name alias, Table<MultichannelSmsHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MultichannelSmsHistory(Table<O> child, ForeignKey<O, MultichannelSmsHistoryRecord> key) {
        super(child, key, MULTICHANNEL_SMS_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<MultichannelSmsHistoryRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MULTICHANNEL_SMS_HISTORY;
    }

    @Override
    public UniqueKey<MultichannelSmsHistoryRecord> getPrimaryKey() {
        return Keys.KEY_MULTICHANNEL_SMS_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MultichannelSmsHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<MultichannelSmsHistoryRecord>>asList(Keys.KEY_MULTICHANNEL_SMS_HISTORY_PRIMARY);
    }

    @Override
    public MultichannelSmsHistory as(String alias) {
        return new MultichannelSmsHistory(DSL.name(alias), this);
    }

    @Override
    public MultichannelSmsHistory as(Name alias) {
        return new MultichannelSmsHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelSmsHistory rename(String name) {
        return new MultichannelSmsHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelSmsHistory rename(Name name) {
        return new MultichannelSmsHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<UInteger, UInteger, String, String, Timestamp, Timestamp, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
