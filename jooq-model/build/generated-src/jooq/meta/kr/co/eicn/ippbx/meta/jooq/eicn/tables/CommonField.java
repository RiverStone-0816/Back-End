/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CommonFieldRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 유형 필드 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonField extends TableImpl<CommonFieldRecord> {

    private static final long serialVersionUID = 1683871931;

    /**
     * The reference instance of <code>eicn.common_field</code>
     */
    public static final CommonField COMMON_FIELD = new CommonField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonFieldRecord> getRecordType() {
        return CommonFieldRecord.class;
    }

    /**
     * The column <code>eicn.common_field.seq</code>.
     */
    public final TableField<CommonFieldRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.common_field.type</code>. 유형관리 참조키
     */
    public final TableField<CommonFieldRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "유형관리 참조키");

    /**
     * The column <code>eicn.common_field.field_id</code>. 필드아이디 (kind_ + common_basic_field.id)
     */
    public final TableField<CommonFieldRecord, String> FIELD_ID = createField(DSL.name("field_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "필드아이디 (kind_ + common_basic_field.id)");

    /**
     * The column <code>eicn.common_field.field_name</code>. 유형필드명
     */
    public final TableField<CommonFieldRecord, String> FIELD_NAME = createField(DSL.name("field_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "유형필드명");

    /**
     * The column <code>eicn.common_field.field_type</code>. 유형타입
     */
    public final TableField<CommonFieldRecord, String> FIELD_TYPE = createField(DSL.name("field_type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "유형타입");

    /**
     * The column <code>eicn.common_field.field_use</code>. 필드사용여부(D:미사용, U:사용)
     */
    public final TableField<CommonFieldRecord, String> FIELD_USE = createField(DSL.name("field_use"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("U", org.jooq.impl.SQLDataType.CHAR)), this, "필드사용여부(D:미사용, U:사용)");

    /**
     * The column <code>eicn.common_field.field_info</code>. 필드정보
     */
    public final TableField<CommonFieldRecord, String> FIELD_INFO = createField(DSL.name("field_info"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "필드정보");

    /**
     * The column <code>eicn.common_field.field_size</code>. 문자열크기
     */
    public final TableField<CommonFieldRecord, Integer> FIELD_SIZE = createField(DSL.name("field_size"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "문자열크기");

    /**
     * The column <code>eicn.common_field.isneed</code>. 필수여부
     */
    public final TableField<CommonFieldRecord, String> ISNEED = createField(DSL.name("isneed"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "필수여부");

    /**
     * The column <code>eicn.common_field.isdisplay</code>. 보이기여부
     */
    public final TableField<CommonFieldRecord, String> ISDISPLAY = createField(DSL.name("isdisplay"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "보이기여부");

    /**
     * The column <code>eicn.common_field.isdisplay_list</code>. 리스트 출력여부
     */
    public final TableField<CommonFieldRecord, String> ISDISPLAY_LIST = createField(DSL.name("isdisplay_list"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "리스트 출력여부");

    /**
     * The column <code>eicn.common_field.issearch</code>. 검색여부
     */
    public final TableField<CommonFieldRecord, String> ISSEARCH = createField(DSL.name("issearch"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "검색여부");

    /**
     * The column <code>eicn.common_field.display_seq</code>. 순서
     */
    public final TableField<CommonFieldRecord, Integer> DISPLAY_SEQ = createField(DSL.name("display_seq"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "순서");

    /**
     * The column <code>eicn.common_field.company_id</code>. 고객사 아이디
     */
    public final TableField<CommonFieldRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * The column <code>eicn.common_field.iskey</code>. 필수키 여부
     */
    public final TableField<CommonFieldRecord, String> ISKEY = createField(DSL.name("iskey"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "필수키 여부");

    /**
     * The column <code>eicn.common_field.isdefault</code>. 고정값
     */
    public final TableField<CommonFieldRecord, String> ISDEFAULT = createField(DSL.name("isdefault"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "고정값");

    /**
     * The column <code>eicn.common_field.isenc</code>. 암호화여부
     */
    public final TableField<CommonFieldRecord, String> ISENC = createField(DSL.name("isenc"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "암호화여부");

    /**
     * Create a <code>eicn.common_field</code> table reference
     */
    public CommonField() {
        this(DSL.name("common_field"), null);
    }

    /**
     * Create an aliased <code>eicn.common_field</code> table reference
     */
    public CommonField(String alias) {
        this(DSL.name(alias), COMMON_FIELD);
    }

    /**
     * Create an aliased <code>eicn.common_field</code> table reference
     */
    public CommonField(Name alias) {
        this(alias, COMMON_FIELD);
    }

    private CommonField(Name alias, Table<CommonFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonField(Name alias, Table<CommonFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("유형 필드 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> CommonField(Table<O> child, ForeignKey<O, CommonFieldRecord> key) {
        super(child, key, COMMON_FIELD);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<CommonFieldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_FIELD;
    }

    @Override
    public List<UniqueKey<CommonFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonFieldRecord>>asList(Keys.KEY_COMMON_FIELD_SEQ);
    }

    @Override
    public CommonField as(String alias) {
        return new CommonField(DSL.name(alias), this);
    }

    @Override
    public CommonField as(Name alias) {
        return new CommonField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonField rename(String name) {
        return new CommonField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonField rename(Name name) {
        return new CommonField(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, String, String, String, String, String, Integer, String, String, String, String, Integer, String, String, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
