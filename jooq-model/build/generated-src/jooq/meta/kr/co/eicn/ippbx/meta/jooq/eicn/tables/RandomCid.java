/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RandomCidRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 랜덤 RID관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RandomCid extends TableImpl<RandomCidRecord> {

    private static final long serialVersionUID = 291588949;

    /**
     * The reference instance of <code>eicn.random_cid</code>
     */
    public static final RandomCid RANDOM_CID = new RandomCid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RandomCidRecord> getRecordType() {
        return RandomCidRecord.class;
    }

    /**
     * The column <code>eicn.random_cid.seq</code>. SEQUENCE KEY
     */
    public final TableField<RandomCidRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQUENCE KEY");

    /**
     * The column <code>eicn.random_cid.number</code>. 고객전화번호
     */
    public final TableField<RandomCidRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객전화번호");

    /**
     * The column <code>eicn.random_cid.company_id</code>. 고객사 아이디
     */
    public final TableField<RandomCidRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * The column <code>eicn.random_cid.group_code</code>.
     */
    public final TableField<RandomCidRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.random_cid.group_tree_name</code>.
     */
    public final TableField<RandomCidRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.random_cid.group_level</code>.
     */
    public final TableField<RandomCidRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.random_cid.short_num</code>. 단축번호
     */
    public final TableField<RandomCidRecord, Byte> SHORT_NUM = createField(DSL.name("short_num"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "단축번호");

    /**
     * Create a <code>eicn.random_cid</code> table reference
     */
    public RandomCid() {
        this(DSL.name("random_cid"), null);
    }

    /**
     * Create an aliased <code>eicn.random_cid</code> table reference
     */
    public RandomCid(String alias) {
        this(DSL.name(alias), RANDOM_CID);
    }

    /**
     * Create an aliased <code>eicn.random_cid</code> table reference
     */
    public RandomCid(Name alias) {
        this(alias, RANDOM_CID);
    }

    private RandomCid(Name alias, Table<RandomCidRecord> aliased) {
        this(alias, aliased, null);
    }

    private RandomCid(Name alias, Table<RandomCidRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("랜덤 RID관리 테이블"), TableOptions.table());
    }

    public <O extends Record> RandomCid(Table<O> child, ForeignKey<O, RandomCidRecord> key) {
        super(child, key, RANDOM_CID);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<RandomCidRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RANDOM_CID;
    }

    @Override
    public List<UniqueKey<RandomCidRecord>> getKeys() {
        return Arrays.<UniqueKey<RandomCidRecord>>asList(Keys.KEY_RANDOM_CID_SEQ);
    }

    @Override
    public RandomCid as(String alias) {
        return new RandomCid(DSL.name(alias), this);
    }

    @Override
    public RandomCid as(Name alias) {
        return new RandomCid(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RandomCid rename(String name) {
        return new RandomCid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RandomCid rename(Name name) {
        return new RandomCid(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Integer, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
