/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ArsAuthRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 전화인증관련
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArsAuth extends TableImpl<ArsAuthRecord> {

    private static final long serialVersionUID = -1966555838;

    /**
     * The reference instance of <code>eicn.ars_auth</code>
     */
    public static final ArsAuth ARS_AUTH = new ArsAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArsAuthRecord> getRecordType() {
        return ArsAuthRecord.class;
    }

    /**
     * The column <code>eicn.ars_auth.seq</code>.
     */
    public final TableField<ArsAuthRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.ars_auth.insert_date</code>.
     */
    public final TableField<ArsAuthRecord, Timestamp> INSERT_DATE = createField(DSL.name("insert_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.ars_auth.userid</code>.
     */
    public final TableField<ArsAuthRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ars_auth.number</code>.
     */
    public final TableField<ArsAuthRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ars_auth.session_id</code>.
     */
    public final TableField<ArsAuthRecord, String> SESSION_ID = createField(DSL.name("session_id"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ars_auth.auth_num</code>.
     */
    public final TableField<ArsAuthRecord, String> AUTH_NUM = createField(DSL.name("auth_num"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ars_auth.ars_status</code>.
     */
    public final TableField<ArsAuthRecord, String> ARS_STATUS = createField(DSL.name("ars_status"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.ars_auth.company_id</code>.
     */
    public final TableField<ArsAuthRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.ars_auth</code> table reference
     */
    public ArsAuth() {
        this(DSL.name("ars_auth"), null);
    }

    /**
     * Create an aliased <code>eicn.ars_auth</code> table reference
     */
    public ArsAuth(String alias) {
        this(DSL.name(alias), ARS_AUTH);
    }

    /**
     * Create an aliased <code>eicn.ars_auth</code> table reference
     */
    public ArsAuth(Name alias) {
        this(alias, ARS_AUTH);
    }

    private ArsAuth(Name alias, Table<ArsAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArsAuth(Name alias, Table<ArsAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("전화인증관련"), TableOptions.table());
    }

    public <O extends Record> ArsAuth(Table<O> child, ForeignKey<O, ArsAuthRecord> key) {
        super(child, key, ARS_AUTH);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<ArsAuthRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARS_AUTH;
    }

    @Override
    public List<UniqueKey<ArsAuthRecord>> getKeys() {
        return Arrays.<UniqueKey<ArsAuthRecord>>asList(Keys.KEY_ARS_AUTH_SEQ);
    }

    @Override
    public ArsAuth as(String alias) {
        return new ArsAuth(DSL.name(alias), this);
    }

    @Override
    public ArsAuth as(Name alias) {
        return new ArsAuth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArsAuth rename(String name) {
        return new ArsAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArsAuth rename(Name name) {
        return new ArsAuth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Timestamp, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
