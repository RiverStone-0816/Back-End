/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.DaemonListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 서버별 데몬 설정 정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DaemonList extends TableImpl<DaemonListRecord> {

    private static final long serialVersionUID = -640417184;

    /**
     * The reference instance of <code>eicn.daemon_list</code>
     */
    public static final DaemonList DAEMON_LIST = new DaemonList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DaemonListRecord> getRecordType() {
        return DaemonListRecord.class;
    }

    /**
     * The column <code>eicn.daemon_list.seq</code>. AUTO_INCREMENT
     */
    public final TableField<DaemonListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "AUTO_INCREMENT");

    /**
     * The column <code>eicn.daemon_list.host</code>. 서버 host-server_info 테이블 host컬럼
     */
    public final TableField<DaemonListRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버 host-server_info 테이블 host컬럼");

    /**
     * The column <code>eicn.daemon_list.daemon_id</code>. 데몬 아이디 - daemon_info 테이블 id 컬럼
     */
    public final TableField<DaemonListRecord, String> DAEMON_ID = createField(DSL.name("daemon_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬 아이디 - daemon_info 테이블 id 컬럼");

    /**
     * The column <code>eicn.daemon_list.etc</code>.
     */
    public final TableField<DaemonListRecord, String> ETC = createField(DSL.name("etc"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.daemon_list</code> table reference
     */
    public DaemonList() {
        this(DSL.name("daemon_list"), null);
    }

    /**
     * Create an aliased <code>eicn.daemon_list</code> table reference
     */
    public DaemonList(String alias) {
        this(DSL.name(alias), DAEMON_LIST);
    }

    /**
     * Create an aliased <code>eicn.daemon_list</code> table reference
     */
    public DaemonList(Name alias) {
        this(alias, DAEMON_LIST);
    }

    private DaemonList(Name alias, Table<DaemonListRecord> aliased) {
        this(alias, aliased, null);
    }

    private DaemonList(Name alias, Table<DaemonListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("서버별 데몬 설정 정보"), TableOptions.table());
    }

    public <O extends Record> DaemonList(Table<O> child, ForeignKey<O, DaemonListRecord> key) {
        super(child, key, DAEMON_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DAEMON_LIST_HOST);
    }

    @Override
    public Identity<DaemonListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DAEMON_LIST;
    }

    @Override
    public List<UniqueKey<DaemonListRecord>> getKeys() {
        return Arrays.<UniqueKey<DaemonListRecord>>asList(Keys.KEY_DAEMON_LIST_SEQ);
    }

    @Override
    public DaemonList as(String alias) {
        return new DaemonList(DSL.name(alias), this);
    }

    @Override
    public DaemonList as(Name alias) {
        return new DaemonList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DaemonList rename(String name) {
        return new DaemonList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DaemonList rename(Name name) {
        return new DaemonList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
