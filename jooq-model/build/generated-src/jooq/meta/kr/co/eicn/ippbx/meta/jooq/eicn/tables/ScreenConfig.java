/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.enums.ScreenConfigExpressionType;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ScreenConfigRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 전광판 설정
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScreenConfig extends TableImpl<ScreenConfigRecord> {

    private static final long serialVersionUID = -1242511192;

    /**
     * The reference instance of <code>eicn.screen_config</code>
     */
    public static final ScreenConfig SCREEN_CONFIG = new ScreenConfig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScreenConfigRecord> getRecordType() {
        return ScreenConfigRecord.class;
    }

    /**
     * The column <code>eicn.screen_config.seq</code>.
     */
    public final TableField<ScreenConfigRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.screen_config.name</code>. 전광판 이름
     */
    public final TableField<ScreenConfigRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "전광판 이름");

    /**
     * The column <code>eicn.screen_config.look_and_feel</code>. 사전 정의된 디자인 번호
     */
    public final TableField<ScreenConfigRecord, Integer> LOOK_AND_FEEL = createField(DSL.name("look_and_feel"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "사전 정의된 디자인 번호");

    /**
     * The column <code>eicn.screen_config.expression_type</code>. 사전 정의된 데이터 표현 형식
     */
    public final TableField<ScreenConfigRecord, ScreenConfigExpressionType> EXPRESSION_TYPE = createField(DSL.name("expression_type"), org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(kr.co.eicn.ippbx.meta.jooq.eicn.enums.ScreenConfigExpressionType.class), this, "사전 정의된 데이터 표현 형식");

    /**
     * The column <code>eicn.screen_config.show_sliding_text</code>. 슬라이딩 문구 표현 여부
     */
    public final TableField<ScreenConfigRecord, Boolean> SHOW_SLIDING_TEXT = createField(DSL.name("show_sliding_text"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "슬라이딩 문구 표현 여부");

    /**
     * The column <code>eicn.screen_config.sliding_text</code>. 슬라이딩 문구
     */
    public final TableField<ScreenConfigRecord, String> SLIDING_TEXT = createField(DSL.name("sliding_text"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "슬라이딩 문구");

    /**
     * The column <code>eicn.screen_config.company_id</code>.
     */
    public final TableField<ScreenConfigRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>eicn.screen_config</code> table reference
     */
    public ScreenConfig() {
        this(DSL.name("screen_config"), null);
    }

    /**
     * Create an aliased <code>eicn.screen_config</code> table reference
     */
    public ScreenConfig(String alias) {
        this(DSL.name(alias), SCREEN_CONFIG);
    }

    /**
     * Create an aliased <code>eicn.screen_config</code> table reference
     */
    public ScreenConfig(Name alias) {
        this(alias, SCREEN_CONFIG);
    }

    private ScreenConfig(Name alias, Table<ScreenConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScreenConfig(Name alias, Table<ScreenConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("전광판 설정"), TableOptions.table());
    }

    public <O extends Record> ScreenConfig(Table<O> child, ForeignKey<O, ScreenConfigRecord> key) {
        super(child, key, SCREEN_CONFIG);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<ScreenConfigRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCREEN_CONFIG;
    }

    @Override
    public UniqueKey<ScreenConfigRecord> getPrimaryKey() {
        return Keys.KEY_SCREEN_CONFIG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScreenConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ScreenConfigRecord>>asList(Keys.KEY_SCREEN_CONFIG_PRIMARY);
    }

    @Override
    public ScreenConfig as(String alias) {
        return new ScreenConfig(DSL.name(alias), this);
    }

    @Override
    public ScreenConfig as(Name alias) {
        return new ScreenConfig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScreenConfig rename(String name) {
        return new ScreenConfig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScreenConfig rename(Name name) {
        return new ScreenConfig(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, Integer, ScreenConfigExpressionType, Boolean, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
