/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ConCsCodeInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConCsCodeInfo extends TableImpl<ConCsCodeInfoRecord> {

    private static final long serialVersionUID = -943163149;

    /**
     * The reference instance of <code>eicn.con_cs_code_info</code>
     */
    public static final ConCsCodeInfo CON_CS_CODE_INFO = new ConCsCodeInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConCsCodeInfoRecord> getRecordType() {
        return ConCsCodeInfoRecord.class;
    }

    /**
     * The column <code>eicn.con_cs_code_info.seq</code>.
     */
    public final TableField<ConCsCodeInfoRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.type</code>.
     */
    public final TableField<ConCsCodeInfoRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.field_type</code>.
     */
    public final TableField<ConCsCodeInfoRecord, String> FIELD_TYPE = createField(DSL.name("field_type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.field_id</code>.
     */
    public final TableField<ConCsCodeInfoRecord, String> FIELD_ID = createField(DSL.name("field_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.con_group_id</code>.
     */
    public final TableField<ConCsCodeInfoRecord, Integer> CON_GROUP_ID = createField(DSL.name("con_group_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.cs_url</code>.
     */
    public final TableField<ConCsCodeInfoRecord, String> CS_URL = createField(DSL.name("cs_url"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("A", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.con_cs_code_info.company_id</code>.
     */
    public final TableField<ConCsCodeInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.con_cs_code_info</code> table reference
     */
    public ConCsCodeInfo() {
        this(DSL.name("con_cs_code_info"), null);
    }

    /**
     * Create an aliased <code>eicn.con_cs_code_info</code> table reference
     */
    public ConCsCodeInfo(String alias) {
        this(DSL.name(alias), CON_CS_CODE_INFO);
    }

    /**
     * Create an aliased <code>eicn.con_cs_code_info</code> table reference
     */
    public ConCsCodeInfo(Name alias) {
        this(alias, CON_CS_CODE_INFO);
    }

    private ConCsCodeInfo(Name alias, Table<ConCsCodeInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConCsCodeInfo(Name alias, Table<ConCsCodeInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ConCsCodeInfo(Table<O> child, ForeignKey<O, ConCsCodeInfoRecord> key) {
        super(child, key, CON_CS_CODE_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<ConCsCodeInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CON_CS_CODE_INFO;
    }

    @Override
    public List<UniqueKey<ConCsCodeInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<ConCsCodeInfoRecord>>asList(Keys.KEY_CON_CS_CODE_INFO_SEQ);
    }

    @Override
    public ConCsCodeInfo as(String alias) {
        return new ConCsCodeInfo(DSL.name(alias), this);
    }

    @Override
    public ConCsCodeInfo as(Name alias) {
        return new ConCsCodeInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConCsCodeInfo rename(String name) {
        return new ConCsCodeInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConCsCodeInfo rename(Name name) {
        return new ConCsCodeInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, String, Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
