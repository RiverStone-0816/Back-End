/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CompanyTreeLevelNameRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyTreeLevelName extends TableImpl<CompanyTreeLevelNameRecord> {

    private static final long serialVersionUID = -1410358234;

    /**
     * The reference instance of <code>eicn.company_tree_level_name</code>
     */
    public static final CompanyTreeLevelName COMPANY_TREE_LEVEL_NAME = new CompanyTreeLevelName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyTreeLevelNameRecord> getRecordType() {
        return CompanyTreeLevelNameRecord.class;
    }

    /**
     * The column <code>eicn.company_tree_level_name.seq</code>.
     */
    public final TableField<CompanyTreeLevelNameRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.company_tree_level_name.group_level</code>.
     */
    public final TableField<CompanyTreeLevelNameRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.company_tree_level_name.group_tree_name</code>.
     */
    public final TableField<CompanyTreeLevelNameRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.company_tree_level_name.company_id</code>.
     */
    public final TableField<CompanyTreeLevelNameRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.company_tree_level_name</code> table reference
     */
    public CompanyTreeLevelName() {
        this(DSL.name("company_tree_level_name"), null);
    }

    /**
     * Create an aliased <code>eicn.company_tree_level_name</code> table reference
     */
    public CompanyTreeLevelName(String alias) {
        this(DSL.name(alias), COMPANY_TREE_LEVEL_NAME);
    }

    /**
     * Create an aliased <code>eicn.company_tree_level_name</code> table reference
     */
    public CompanyTreeLevelName(Name alias) {
        this(alias, COMPANY_TREE_LEVEL_NAME);
    }

    private CompanyTreeLevelName(Name alias, Table<CompanyTreeLevelNameRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyTreeLevelName(Name alias, Table<CompanyTreeLevelNameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CompanyTreeLevelName(Table<O> child, ForeignKey<O, CompanyTreeLevelNameRecord> key) {
        super(child, key, COMPANY_TREE_LEVEL_NAME);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_TREE_LEVEL_NAME_COMPANY_ID);
    }

    @Override
    public Identity<CompanyTreeLevelNameRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_TREE_LEVEL_NAME;
    }

    @Override
    public List<UniqueKey<CompanyTreeLevelNameRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyTreeLevelNameRecord>>asList(Keys.KEY_COMPANY_TREE_LEVEL_NAME_SEQ);
    }

    @Override
    public CompanyTreeLevelName as(String alias) {
        return new CompanyTreeLevelName(DSL.name(alias), this);
    }

    @Override
    public CompanyTreeLevelName as(Name alias) {
        return new CompanyTreeLevelName(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTreeLevelName rename(String name) {
        return new CompanyTreeLevelName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTreeLevelName rename(Name name) {
        return new CompanyTreeLevelName(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
