/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.DaemonInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DaemonInfo extends TableImpl<DaemonInfoRecord> {

    private static final long serialVersionUID = 731656082;

    /**
     * The reference instance of <code>eicn.daemon_info</code>
     */
    public static final DaemonInfo DAEMON_INFO = new DaemonInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DaemonInfoRecord> getRecordType() {
        return DaemonInfoRecord.class;
    }

    /**
     * The column <code>eicn.daemon_info.id</code>. 데몬아이디
     */
    public final TableField<DaemonInfoRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬아이디");

    /**
     * The column <code>eicn.daemon_info.type</code>. 데몬타입
     */
    public final TableField<DaemonInfoRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬타입");

    /**
     * The column <code>eicn.daemon_info.name</code>. 데몬이름
     */
    public final TableField<DaemonInfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬이름");

    /**
     * The column <code>eicn.daemon_info.port</code>. Listening 데몬포트
     */
    public final TableField<DaemonInfoRecord, String> PORT = createField(DSL.name("port"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Listening 데몬포트");

    /**
     * The column <code>eicn.daemon_info.protocol</code>. 프로토콜
     */
    public final TableField<DaemonInfoRecord, String> PROTOCOL = createField(DSL.name("protocol"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "프로토콜");

    /**
     * The column <code>eicn.daemon_info.command1</code>. 데몬스타트SHELL
     */
    public final TableField<DaemonInfoRecord, String> COMMAND1 = createField(DSL.name("command1"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬스타트SHELL");

    /**
     * The column <code>eicn.daemon_info.command2</code>. 데몬스탑SHELL
     */
    public final TableField<DaemonInfoRecord, String> COMMAND2 = createField(DSL.name("command2"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬스탑SHELL");

    /**
     * The column <code>eicn.daemon_info.command3</code>. 데몬리스타트SHELL
     */
    public final TableField<DaemonInfoRecord, String> COMMAND3 = createField(DSL.name("command3"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "데몬리스타트SHELL");

    /**
     * The column <code>eicn.daemon_info.is_use</code>. 사용유무
     */
    public final TableField<DaemonInfoRecord, String> IS_USE = createField(DSL.name("is_use"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "사용유무");

    /**
     * The column <code>eicn.daemon_info.socket_url_in</code>. PC화면에서접속시 외부IP로 접근이 불가할경우 socket url
     */
    public final TableField<DaemonInfoRecord, String> SOCKET_URL_IN = createField(DSL.name("socket_url_in"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "PC화면에서접속시 외부IP로 접근이 불가할경우 socket url");

    /**
     * The column <code>eicn.daemon_info.socket_url_out</code>. PC화면에서접속시 외부IP로 접근이 가능할경우 socket url
     */
    public final TableField<DaemonInfoRecord, String> SOCKET_URL_OUT = createField(DSL.name("socket_url_out"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "PC화면에서접속시 외부IP로 접근이 가능할경우 socket url");

    /**
     * The column <code>eicn.daemon_info.port_connector</code>. 다른데몬과 통신할경우 Listening 할 포트
     */
    public final TableField<DaemonInfoRecord, String> PORT_CONNECTOR = createField(DSL.name("port_connector"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "다른데몬과 통신할경우 Listening 할 포트");

    /**
     * Create a <code>eicn.daemon_info</code> table reference
     */
    public DaemonInfo() {
        this(DSL.name("daemon_info"), null);
    }

    /**
     * Create an aliased <code>eicn.daemon_info</code> table reference
     */
    public DaemonInfo(String alias) {
        this(DSL.name(alias), DAEMON_INFO);
    }

    /**
     * Create an aliased <code>eicn.daemon_info</code> table reference
     */
    public DaemonInfo(Name alias) {
        this(alias, DAEMON_INFO);
    }

    private DaemonInfo(Name alias, Table<DaemonInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DaemonInfo(Name alias, Table<DaemonInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DaemonInfo(Table<O> child, ForeignKey<O, DaemonInfoRecord> key) {
        super(child, key, DAEMON_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<UniqueKey<DaemonInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<DaemonInfoRecord>>asList(Keys.KEY_DAEMON_INFO_ID);
    }

    @Override
    public DaemonInfo as(String alias) {
        return new DaemonInfo(DSL.name(alias), this);
    }

    @Override
    public DaemonInfo as(Name alias) {
        return new DaemonInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DaemonInfo rename(String name) {
        return new DaemonInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DaemonInfo rename(Name name) {
        return new DaemonInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
