/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.MultichannelListHisRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultichannelListHis extends TableImpl<MultichannelListHisRecord> {

    private static final long serialVersionUID = 79354549;

    /**
     * The reference instance of <code>eicn.multichannel_list_his</code>
     */
    public static final MultichannelListHis MULTICHANNEL_LIST_HIS = new MultichannelListHis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultichannelListHisRecord> getRecordType() {
        return MultichannelListHisRecord.class;
    }

    /**
     * The column <code>eicn.multichannel_list_his.seq</code>.
     */
    public final TableField<MultichannelListHisRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.target_id</code>.
     */
    public final TableField<MultichannelListHisRecord, Integer> TARGET_ID = createField(DSL.name("target_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.type</code>.
     */
    public final TableField<MultichannelListHisRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.status</code>.
     */
    public final TableField<MultichannelListHisRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.update_date</code>.
     */
    public final TableField<MultichannelListHisRecord, Timestamp> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.userid</code>.
     */
    public final TableField<MultichannelListHisRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.username</code>.
     */
    public final TableField<MultichannelListHisRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.memo</code>.
     */
    public final TableField<MultichannelListHisRecord, String> MEMO = createField(DSL.name("memo"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.company_id</code>.
     */
    public final TableField<MultichannelListHisRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list_his.reply</code>.
     */
    public final TableField<MultichannelListHisRecord, String> REPLY = createField(DSL.name("reply"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>eicn.multichannel_list_his.service_name</code>.
     */
    public final TableField<MultichannelListHisRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.multichannel_list_his</code> table reference
     */
    public MultichannelListHis() {
        this(DSL.name("multichannel_list_his"), null);
    }

    /**
     * Create an aliased <code>eicn.multichannel_list_his</code> table reference
     */
    public MultichannelListHis(String alias) {
        this(DSL.name(alias), MULTICHANNEL_LIST_HIS);
    }

    /**
     * Create an aliased <code>eicn.multichannel_list_his</code> table reference
     */
    public MultichannelListHis(Name alias) {
        this(alias, MULTICHANNEL_LIST_HIS);
    }

    private MultichannelListHis(Name alias, Table<MultichannelListHisRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultichannelListHis(Name alias, Table<MultichannelListHisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MultichannelListHis(Table<O> child, ForeignKey<O, MultichannelListHisRecord> key) {
        super(child, key, MULTICHANNEL_LIST_HIS);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MULTICHANNEL_LIST_HIS_COMPANY_ID, Indexes.MULTICHANNEL_LIST_HIS_TARGET_ID, Indexes.MULTICHANNEL_LIST_HIS_TYPE);
    }

    @Override
    public Identity<MultichannelListHisRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MULTICHANNEL_LIST_HIS;
    }

    @Override
    public UniqueKey<MultichannelListHisRecord> getPrimaryKey() {
        return Keys.KEY_MULTICHANNEL_LIST_HIS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MultichannelListHisRecord>> getKeys() {
        return Arrays.<UniqueKey<MultichannelListHisRecord>>asList(Keys.KEY_MULTICHANNEL_LIST_HIS_PRIMARY);
    }

    @Override
    public MultichannelListHis as(String alias) {
        return new MultichannelListHis(DSL.name(alias), this);
    }

    @Override
    public MultichannelListHis as(Name alias) {
        return new MultichannelListHis(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelListHis rename(String name) {
        return new MultichannelListHis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelListHis rename(Name name) {
        return new MultichannelListHis(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, Timestamp, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
