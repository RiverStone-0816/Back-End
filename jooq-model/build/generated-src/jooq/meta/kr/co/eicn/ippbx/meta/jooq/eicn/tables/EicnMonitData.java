/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.EicnMonitDataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EicnMonitData extends TableImpl<EicnMonitDataRecord> {

    private static final long serialVersionUID = 1181847501;

    /**
     * The reference instance of <code>eicn.eicn_monit_data</code>
     */
    public static final EicnMonitData EICN_MONIT_DATA = new EicnMonitData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EicnMonitDataRecord> getRecordType() {
        return EicnMonitDataRecord.class;
    }

    /**
     * The column <code>eicn.eicn_monit_data.seq</code>.
     */
    public final TableField<EicnMonitDataRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.eicn_monit_data.insert_date</code>.
     */
    public final TableField<EicnMonitDataRecord, Timestamp> INSERT_DATE = createField(DSL.name("insert_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("2016-01-01 01:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.eicn_monit_data.host</code>.
     */
    public final TableField<EicnMonitDataRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.eicn_monit_data.company_id</code>.
     */
    public final TableField<EicnMonitDataRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.eicn_monit_data.data</code>.
     */
    public final TableField<EicnMonitDataRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.eicn_monit_data</code> table reference
     */
    public EicnMonitData() {
        this(DSL.name("eicn_monit_data"), null);
    }

    /**
     * Create an aliased <code>eicn.eicn_monit_data</code> table reference
     */
    public EicnMonitData(String alias) {
        this(DSL.name(alias), EICN_MONIT_DATA);
    }

    /**
     * Create an aliased <code>eicn.eicn_monit_data</code> table reference
     */
    public EicnMonitData(Name alias) {
        this(alias, EICN_MONIT_DATA);
    }

    private EicnMonitData(Name alias, Table<EicnMonitDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private EicnMonitData(Name alias, Table<EicnMonitDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EicnMonitData(Table<O> child, ForeignKey<O, EicnMonitDataRecord> key) {
        super(child, key, EICN_MONIT_DATA);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EICN_MONIT_DATA_HOST, Indexes.EICN_MONIT_DATA_INSERT_DATE);
    }

    @Override
    public Identity<EicnMonitDataRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EICN_MONIT_DATA;
    }

    @Override
    public List<UniqueKey<EicnMonitDataRecord>> getKeys() {
        return Arrays.<UniqueKey<EicnMonitDataRecord>>asList(Keys.KEY_EICN_MONIT_DATA_SEQ);
    }

    @Override
    public EicnMonitData as(String alias) {
        return new EicnMonitData(DSL.name(alias), this);
    }

    @Override
    public EicnMonitData as(Name alias) {
        return new EicnMonitData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EicnMonitData rename(String name) {
        return new EicnMonitData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EicnMonitData rename(Name name) {
        return new EicnMonitData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Timestamp, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
