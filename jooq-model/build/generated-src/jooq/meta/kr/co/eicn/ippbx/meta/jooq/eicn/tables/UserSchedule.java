/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.enums.UserScheduleType;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.UserScheduleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSchedule extends TableImpl<UserScheduleRecord> {

    private static final long serialVersionUID = -778823699;

    /**
     * The reference instance of <code>eicn.user_schedule</code>
     */
    public static final UserSchedule USER_SCHEDULE = new UserSchedule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserScheduleRecord> getRecordType() {
        return UserScheduleRecord.class;
    }

    /**
     * The column <code>eicn.user_schedule.seq</code>.
     */
    public final TableField<UserScheduleRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.user_schedule.type</code>.
     */
    public final TableField<UserScheduleRecord, UserScheduleType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(kr.co.eicn.ippbx.meta.jooq.eicn.enums.UserScheduleType.class), this, "");

    /**
     * The column <code>eicn.user_schedule.important</code>.
     */
    public final TableField<UserScheduleRecord, Boolean> IMPORTANT = createField(DSL.name("important"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>eicn.user_schedule.start</code>.
     */
    public final TableField<UserScheduleRecord, Timestamp> START = createField(DSL.name("start"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.user_schedule.end</code>.
     */
    public final TableField<UserScheduleRecord, Timestamp> END = createField(DSL.name("end"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.user_schedule.title</code>.
     */
    public final TableField<UserScheduleRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(1024).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.user_schedule.contents</code>.
     */
    public final TableField<UserScheduleRecord, String> CONTENTS = createField(DSL.name("contents"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>eicn.user_schedule.userid</code>.
     */
    public final TableField<UserScheduleRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>eicn.user_schedule.company_id</code>.
     */
    public final TableField<UserScheduleRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * Create a <code>eicn.user_schedule</code> table reference
     */
    public UserSchedule() {
        this(DSL.name("user_schedule"), null);
    }

    /**
     * Create an aliased <code>eicn.user_schedule</code> table reference
     */
    public UserSchedule(String alias) {
        this(DSL.name(alias), USER_SCHEDULE);
    }

    /**
     * Create an aliased <code>eicn.user_schedule</code> table reference
     */
    public UserSchedule(Name alias) {
        this(alias, USER_SCHEDULE);
    }

    private UserSchedule(Name alias, Table<UserScheduleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSchedule(Name alias, Table<UserScheduleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserSchedule(Table<O> child, ForeignKey<O, UserScheduleRecord> key) {
        super(child, key, USER_SCHEDULE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<UserScheduleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_SCHEDULE;
    }

    @Override
    public UniqueKey<UserScheduleRecord> getPrimaryKey() {
        return Keys.KEY_USER_SCHEDULE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserScheduleRecord>> getKeys() {
        return Arrays.<UniqueKey<UserScheduleRecord>>asList(Keys.KEY_USER_SCHEDULE_PRIMARY);
    }

    @Override
    public UserSchedule as(String alias) {
        return new UserSchedule(DSL.name(alias), this);
    }

    @Override
    public UserSchedule as(Name alias) {
        return new UserSchedule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSchedule rename(String name) {
        return new UserSchedule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSchedule rename(Name name) {
        return new UserSchedule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, UserScheduleType, Boolean, Timestamp, Timestamp, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
