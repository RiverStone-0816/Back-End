/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables.records;


import kr.co.eicn.ippbx.meta.jooq.eicn.tables.HoldInfo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HoldInfoRecord extends UpdatableRecordImpl<HoldInfoRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1752904401;

    /**
     * Setter for <code>eicn.hold_info.peer</code>.
     */
    public HoldInfoRecord setPeer(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>eicn.hold_info.peer</code>.
     */
    public String getPeer() {
        return (String) get(0);
    }

    /**
     * Setter for <code>eicn.hold_info.channel</code>.
     */
    public HoldInfoRecord setChannel(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>eicn.hold_info.channel</code>.
     */
    public String getChannel() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return HoldInfo.HOLD_INFO.PEER;
    }

    @Override
    public Field<String> field2() {
        return HoldInfo.HOLD_INFO.CHANNEL;
    }

    @Override
    public String component1() {
        return getPeer();
    }

    @Override
    public String component2() {
        return getChannel();
    }

    @Override
    public String value1() {
        return getPeer();
    }

    @Override
    public String value2() {
        return getChannel();
    }

    @Override
    public HoldInfoRecord value1(String value) {
        setPeer(value);
        return this;
    }

    @Override
    public HoldInfoRecord value2(String value) {
        setChannel(value);
        return this;
    }

    @Override
    public HoldInfoRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HoldInfoRecord
     */
    public HoldInfoRecord() {
        super(HoldInfo.HOLD_INFO);
    }

    /**
     * Create a detached, initialised HoldInfoRecord
     */
    public HoldInfoRecord(String peer, String channel) {
        super(HoldInfo.HOLD_INFO);

        set(0, peer);
        set(1, channel);
    }
}
