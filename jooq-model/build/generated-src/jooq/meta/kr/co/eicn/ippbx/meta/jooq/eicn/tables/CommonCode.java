/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CommonCodeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonCode extends TableImpl<CommonCodeRecord> {

    private static final long serialVersionUID = -1064610945;

    /**
     * The reference instance of <code>eicn.common_code</code>
     */
    public static final CommonCode COMMON_CODE = new CommonCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonCodeRecord> getRecordType() {
        return CommonCodeRecord.class;
    }

    /**
     * The column <code>eicn.common_code.seq</code>.
     */
    public final TableField<CommonCodeRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.common_code.type</code>.
     */
    public final TableField<CommonCodeRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.common_code.field_id</code>.
     */
    public final TableField<CommonCodeRecord, String> FIELD_ID = createField(DSL.name("field_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_code.related_field_id</code>.
     */
    public final TableField<CommonCodeRecord, String> RELATED_FIELD_ID = createField(DSL.name("related_field_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_code.code_id</code>.
     */
    public final TableField<CommonCodeRecord, String> CODE_ID = createField(DSL.name("code_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("A", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_code.code_name</code>.
     */
    public final TableField<CommonCodeRecord, String> CODE_NAME = createField(DSL.name("code_name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_code.company_id</code>.
     */
    public final TableField<CommonCodeRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_code.sequence</code>.
     */
    public final TableField<CommonCodeRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.common_code.hide</code>.
     */
    public final TableField<CommonCodeRecord, String> HIDE = createField(DSL.name("hide"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.common_code.script</code>.
     */
    public final TableField<CommonCodeRecord, String> SCRIPT = createField(DSL.name("script"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.common_code</code> table reference
     */
    public CommonCode() {
        this(DSL.name("common_code"), null);
    }

    /**
     * Create an aliased <code>eicn.common_code</code> table reference
     */
    public CommonCode(String alias) {
        this(DSL.name(alias), COMMON_CODE);
    }

    /**
     * Create an aliased <code>eicn.common_code</code> table reference
     */
    public CommonCode(Name alias) {
        this(alias, COMMON_CODE);
    }

    private CommonCode(Name alias, Table<CommonCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonCode(Name alias, Table<CommonCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CommonCode(Table<O> child, ForeignKey<O, CommonCodeRecord> key) {
        super(child, key, COMMON_CODE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<CommonCodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_CODE;
    }

    @Override
    public List<UniqueKey<CommonCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonCodeRecord>>asList(Keys.KEY_COMMON_CODE_SEQ);
    }

    @Override
    public CommonCode as(String alias) {
        return new CommonCode(DSL.name(alias), this);
    }

    @Override
    public CommonCode as(Name alias) {
        return new CommonCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonCode rename(String name) {
        return new CommonCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonCode rename(Name name) {
        return new CommonCode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, String, String, String, Integer, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
