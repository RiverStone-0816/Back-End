/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.GradeListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GradeList extends TableImpl<GradeListRecord> {

    private static final long serialVersionUID = -1942303986;

    /**
     * The reference instance of <code>eicn.grade_list</code>
     */
    public static final GradeList GRADE_LIST = new GradeList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GradeListRecord> getRecordType() {
        return GradeListRecord.class;
    }

    /**
     * The column <code>eicn.grade_list.seq</code>.
     */
    public final TableField<GradeListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.grade_list.grade</code>.
     */
    public final TableField<GradeListRecord, String> GRADE = createField(DSL.name("grade"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.grade_number</code>.
     */
    public final TableField<GradeListRecord, String> GRADE_NUMBER = createField(DSL.name("grade_number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.grade_name</code>.
     */
    public final TableField<GradeListRecord, String> GRADE_NAME = createField(DSL.name("grade_name"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.type</code>.
     */
    public final TableField<GradeListRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.hunt_number</code>.
     */
    public final TableField<GradeListRecord, String> HUNT_NUMBER = createField(DSL.name("hunt_number"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.etc</code>.
     */
    public final TableField<GradeListRecord, String> ETC = createField(DSL.name("etc"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.grade_list.company_id</code>.
     */
    public final TableField<GradeListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.grade_list</code> table reference
     */
    public GradeList() {
        this(DSL.name("grade_list"), null);
    }

    /**
     * Create an aliased <code>eicn.grade_list</code> table reference
     */
    public GradeList(String alias) {
        this(DSL.name(alias), GRADE_LIST);
    }

    /**
     * Create an aliased <code>eicn.grade_list</code> table reference
     */
    public GradeList(Name alias) {
        this(alias, GRADE_LIST);
    }

    private GradeList(Name alias, Table<GradeListRecord> aliased) {
        this(alias, aliased, null);
    }

    private GradeList(Name alias, Table<GradeListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GradeList(Table<O> child, ForeignKey<O, GradeListRecord> key) {
        super(child, key, GRADE_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GRADE_LIST_GRADE_NUMBER);
    }

    @Override
    public Identity<GradeListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GRADE_LIST;
    }

    @Override
    public UniqueKey<GradeListRecord> getPrimaryKey() {
        return Keys.KEY_GRADE_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<GradeListRecord>> getKeys() {
        return Arrays.<UniqueKey<GradeListRecord>>asList(Keys.KEY_GRADE_LIST_PRIMARY);
    }

    @Override
    public GradeList as(String alias) {
        return new GradeList(DSL.name(alias), this);
    }

    @Override
    public GradeList as(Name alias) {
        return new GradeList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GradeList rename(String name) {
        return new GradeList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GradeList rename(Name name) {
        return new GradeList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
