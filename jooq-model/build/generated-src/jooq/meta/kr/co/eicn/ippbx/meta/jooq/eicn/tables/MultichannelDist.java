/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.MultichannelDistRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultichannelDist extends TableImpl<MultichannelDistRecord> {

    private static final long serialVersionUID = 1263401652;

    /**
     * The reference instance of <code>eicn.multichannel_dist</code>
     */
    public static final MultichannelDist MULTICHANNEL_DIST = new MultichannelDist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultichannelDistRecord> getRecordType() {
        return MultichannelDistRecord.class;
    }

    /**
     * The column <code>eicn.multichannel_dist.seq</code>.
     */
    public final TableField<MultichannelDistRecord, UInteger> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.multichannel_dist.type</code>.
     */
    public final TableField<MultichannelDistRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("E", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_dist.config_id</code>.
     */
    public final TableField<MultichannelDistRecord, UInteger> CONFIG_ID = createField(DSL.name("config_id"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>eicn.multichannel_dist.userid</code>.
     */
    public final TableField<MultichannelDistRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_dist.company_id</code>.
     */
    public final TableField<MultichannelDistRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.multichannel_dist</code> table reference
     */
    public MultichannelDist() {
        this(DSL.name("multichannel_dist"), null);
    }

    /**
     * Create an aliased <code>eicn.multichannel_dist</code> table reference
     */
    public MultichannelDist(String alias) {
        this(DSL.name(alias), MULTICHANNEL_DIST);
    }

    /**
     * Create an aliased <code>eicn.multichannel_dist</code> table reference
     */
    public MultichannelDist(Name alias) {
        this(alias, MULTICHANNEL_DIST);
    }

    private MultichannelDist(Name alias, Table<MultichannelDistRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultichannelDist(Name alias, Table<MultichannelDistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MultichannelDist(Table<O> child, ForeignKey<O, MultichannelDistRecord> key) {
        super(child, key, MULTICHANNEL_DIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MULTICHANNEL_DIST_CONFIG_ID, Indexes.MULTICHANNEL_DIST_TYPE);
    }

    @Override
    public Identity<MultichannelDistRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MULTICHANNEL_DIST;
    }

    @Override
    public UniqueKey<MultichannelDistRecord> getPrimaryKey() {
        return Keys.KEY_MULTICHANNEL_DIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<MultichannelDistRecord>> getKeys() {
        return Arrays.<UniqueKey<MultichannelDistRecord>>asList(Keys.KEY_MULTICHANNEL_DIST_PRIMARY);
    }

    @Override
    public MultichannelDist as(String alias) {
        return new MultichannelDist(DSL.name(alias), this);
    }

    @Override
    public MultichannelDist as(Name alias) {
        return new MultichannelDist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelDist rename(String name) {
        return new MultichannelDist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelDist rename(Name name) {
        return new MultichannelDist(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UInteger, String, UInteger, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
