/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.customdb.tables;


import kr.co.eicn.ippbx.meta.jooq.customdb.Customdb;
import kr.co.eicn.ippbx.meta.jooq.customdb.tables.records.MaindbMultichannelInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaindbMultichannelInfo extends TableImpl<MaindbMultichannelInfoRecord> {

    private static final long serialVersionUID = -1768307775;

    /**
     * The reference instance of <code>CUSTOMDB.maindb_multichannel_info</code>
     */
    public static final MaindbMultichannelInfo MAINDB_MULTICHANNEL_INFO = new MaindbMultichannelInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaindbMultichannelInfoRecord> getRecordType() {
        return MaindbMultichannelInfoRecord.class;
    }

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.seq</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.channel_type</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, String> CHANNEL_TYPE = createField(DSL.name("channel_type"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.channel_data</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, String> CHANNEL_DATA = createField(DSL.name("channel_data"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.maindb_group_id</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, Integer> MAINDB_GROUP_ID = createField(DSL.name("maindb_group_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.maindb_custom_id</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, String> MAINDB_CUSTOM_ID = createField(DSL.name("maindb_custom_id"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.maindb_custom_name</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, String> MAINDB_CUSTOM_NAME = createField(DSL.name("maindb_custom_name"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_multichannel_info.company_id</code>.
     */
    public final TableField<MaindbMultichannelInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>CUSTOMDB.maindb_multichannel_info</code> table reference
     */
    public MaindbMultichannelInfo() {
        this(DSL.name("maindb_multichannel_info"), null);
    }

    /**
     * Create an aliased <code>CUSTOMDB.maindb_multichannel_info</code> table reference
     */
    public MaindbMultichannelInfo(String alias) {
        this(DSL.name(alias), MAINDB_MULTICHANNEL_INFO);
    }

    /**
     * Create an aliased <code>CUSTOMDB.maindb_multichannel_info</code> table reference
     */
    public MaindbMultichannelInfo(Name alias) {
        this(alias, MAINDB_MULTICHANNEL_INFO);
    }

    private MaindbMultichannelInfo(Name alias, Table<MaindbMultichannelInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaindbMultichannelInfo(Name alias, Table<MaindbMultichannelInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MaindbMultichannelInfo(Table<O> child, ForeignKey<O, MaindbMultichannelInfoRecord> key) {
        super(child, key, MAINDB_MULTICHANNEL_INFO);
    }

    @Override
    public Schema getSchema() {
        return Customdb.CUSTOMDB;
    }

    @Override
    public MaindbMultichannelInfo as(String alias) {
        return new MaindbMultichannelInfo(DSL.name(alias), this);
    }

    @Override
    public MaindbMultichannelInfo as(Name alias) {
        return new MaindbMultichannelInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaindbMultichannelInfo rename(String name) {
        return new MaindbMultichannelInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaindbMultichannelInfo rename(Name name) {
        return new MaindbMultichannelInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
