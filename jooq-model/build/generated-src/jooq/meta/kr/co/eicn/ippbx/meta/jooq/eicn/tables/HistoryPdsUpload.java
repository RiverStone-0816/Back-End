/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.HistoryPdsUploadRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HistoryPdsUpload extends TableImpl<HistoryPdsUploadRecord> {

    private static final long serialVersionUID = -1618089412;

    /**
     * The reference instance of <code>eicn.history_pds_upload</code>
     */
    public static final HistoryPdsUpload HISTORY_PDS_UPLOAD = new HistoryPdsUpload();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoryPdsUploadRecord> getRecordType() {
        return HistoryPdsUploadRecord.class;
    }

    /**
     * The column <code>eicn.history_pds_upload.upload_id</code>.
     */
    public final TableField<HistoryPdsUploadRecord, String> UPLOAD_ID = createField(DSL.name("upload_id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.pds_group_id</code>.
     */
    public final TableField<HistoryPdsUploadRecord, Integer> PDS_GROUP_ID = createField(DSL.name("pds_group_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.try_cnt</code>.
     */
    public final TableField<HistoryPdsUploadRecord, Integer> TRY_CNT = createField(DSL.name("try_cnt"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.upload_cnt</code>.
     */
    public final TableField<HistoryPdsUploadRecord, Integer> UPLOAD_CNT = createField(DSL.name("upload_cnt"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.upload_name</code>.
     */
    public final TableField<HistoryPdsUploadRecord, String> UPLOAD_NAME = createField(DSL.name("upload_name"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.upload_date</code>.
     */
    public final TableField<HistoryPdsUploadRecord, Timestamp> UPLOAD_DATE = createField(DSL.name("upload_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("2010-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.upload_status</code>.
     */
    public final TableField<HistoryPdsUploadRecord, String> UPLOAD_STATUS = createField(DSL.name("upload_status"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.history_pds_upload.company_id</code>.
     */
    public final TableField<HistoryPdsUploadRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.history_pds_upload</code> table reference
     */
    public HistoryPdsUpload() {
        this(DSL.name("history_pds_upload"), null);
    }

    /**
     * Create an aliased <code>eicn.history_pds_upload</code> table reference
     */
    public HistoryPdsUpload(String alias) {
        this(DSL.name(alias), HISTORY_PDS_UPLOAD);
    }

    /**
     * Create an aliased <code>eicn.history_pds_upload</code> table reference
     */
    public HistoryPdsUpload(Name alias) {
        this(alias, HISTORY_PDS_UPLOAD);
    }

    private HistoryPdsUpload(Name alias, Table<HistoryPdsUploadRecord> aliased) {
        this(alias, aliased, null);
    }

    private HistoryPdsUpload(Name alias, Table<HistoryPdsUploadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> HistoryPdsUpload(Table<O> child, ForeignKey<O, HistoryPdsUploadRecord> key) {
        super(child, key, HISTORY_PDS_UPLOAD);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HISTORY_PDS_UPLOAD_COMPANY_ID, Indexes.HISTORY_PDS_UPLOAD_PDS_GROUP_ID);
    }

    @Override
    public UniqueKey<HistoryPdsUploadRecord> getPrimaryKey() {
        return Keys.KEY_HISTORY_PDS_UPLOAD_PRIMARY;
    }

    @Override
    public List<UniqueKey<HistoryPdsUploadRecord>> getKeys() {
        return Arrays.<UniqueKey<HistoryPdsUploadRecord>>asList(Keys.KEY_HISTORY_PDS_UPLOAD_PRIMARY);
    }

    @Override
    public HistoryPdsUpload as(String alias) {
        return new HistoryPdsUpload(DSL.name(alias), this);
    }

    @Override
    public HistoryPdsUpload as(Name alias) {
        return new HistoryPdsUpload(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoryPdsUpload rename(String name) {
        return new HistoryPdsUpload(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoryPdsUpload rename(Name name) {
        return new HistoryPdsUpload(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Integer, Integer, Integer, String, Timestamp, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
