/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CommonTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 유형관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonType extends TableImpl<CommonTypeRecord> {

    private static final long serialVersionUID = -982903682;

    /**
     * The reference instance of <code>eicn.common_type</code>
     */
    public static final CommonType COMMON_TYPE = new CommonType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonTypeRecord> getRecordType() {
        return CommonTypeRecord.class;
    }

    /**
     * The column <code>eicn.common_type.seq</code>.
     */
    public final TableField<CommonTypeRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.common_type.name</code>. 유형명
     */
    public final TableField<CommonTypeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "유형명");

    /**
     * The column <code>eicn.common_type.kind</code>. 유형구분
     */
    public final TableField<CommonTypeRecord, String> KIND = createField(DSL.name("kind"), org.jooq.impl.SQLDataType.CHAR(10).defaultValue(org.jooq.impl.DSL.inline("CST", org.jooq.impl.SQLDataType.CHAR)), this, "유형구분");

    /**
     * The column <code>eicn.common_type.status</code>. 상태값
     */
    public final TableField<CommonTypeRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("U", org.jooq.impl.SQLDataType.CHAR)), this, "상태값");

    /**
     * The column <code>eicn.common_type.etc</code>.
     */
    public final TableField<CommonTypeRecord, String> ETC = createField(DSL.name("etc"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_type.company_id</code>. 고객사 아이디
     */
    public final TableField<CommonTypeRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * The column <code>eicn.common_type.purpose</code>. 아웃바운드 유형관리 용도구분
PCC: PDS[상담원 연결], PIC:PDS[IVR연결], SVY:설문조사, VDU:VOC[DB업로드], VCS:VOC[상담화면], ADU:ACS[DB업로드], ACS:ACS[상담화면]
     */
    public final TableField<CommonTypeRecord, String> PURPOSE = createField(DSL.name("purpose"), org.jooq.impl.SQLDataType.CHAR(3), this, "아웃바운드 유형관리 용도구분\r\nPCC: PDS[상담원 연결], PIC:PDS[IVR연결], SVY:설문조사, VDU:VOC[DB업로드], VCS:VOC[상담화면], ADU:ACS[DB업로드], ACS:ACS[상담화면]");

    /**
     * The column <code>eicn.common_type.type</code>. 상담결과 종류
     */
    public final TableField<CommonTypeRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(5).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "상담결과 종류");

    /**
     * Create a <code>eicn.common_type</code> table reference
     */
    public CommonType() {
        this(DSL.name("common_type"), null);
    }

    /**
     * Create an aliased <code>eicn.common_type</code> table reference
     */
    public CommonType(String alias) {
        this(DSL.name(alias), COMMON_TYPE);
    }

    /**
     * Create an aliased <code>eicn.common_type</code> table reference
     */
    public CommonType(Name alias) {
        this(alias, COMMON_TYPE);
    }

    private CommonType(Name alias, Table<CommonTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonType(Name alias, Table<CommonTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("유형관리 테이블"), TableOptions.table());
    }

    public <O extends Record> CommonType(Table<O> child, ForeignKey<O, CommonTypeRecord> key) {
        super(child, key, COMMON_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<CommonTypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_TYPE;
    }

    @Override
    public List<UniqueKey<CommonTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonTypeRecord>>asList(Keys.KEY_COMMON_TYPE_SEQ);
    }

    @Override
    public CommonType as(String alias) {
        return new CommonType(DSL.name(alias), this);
    }

    @Override
    public CommonType as(Name alias) {
        return new CommonType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonType rename(String name) {
        return new CommonType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonType rename(Name name) {
        return new CommonType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
