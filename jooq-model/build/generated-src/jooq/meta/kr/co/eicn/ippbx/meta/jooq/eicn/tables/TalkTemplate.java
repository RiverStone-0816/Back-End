/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.TalkTemplateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 상담톡 템플릿 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TalkTemplate extends TableImpl<TalkTemplateRecord> {

    private static final long serialVersionUID = -1467604889;

    /**
     * The reference instance of <code>eicn.talk_template</code>
     */
    public static final TalkTemplate TALK_TEMPLATE = new TalkTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TalkTemplateRecord> getRecordType() {
        return TalkTemplateRecord.class;
    }

    /**
     * The column <code>eicn.talk_template.seq</code>. SEQUENCE KEY
     */
    public final TableField<TalkTemplateRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQUENCE KEY");

    /**
     * The column <code>eicn.talk_template.type</code>. P:개인, G:그룹, C:회사전체
     */
    public final TableField<TalkTemplateRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "P:개인, G:그룹, C:회사전체");

    /**
     * The column <code>eicn.talk_template.type_data</code>.
     */
    public final TableField<TalkTemplateRecord, String> TYPE_DATA = createField(DSL.name("type_data"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>eicn.talk_template.write_userid</code>. 작성자
     */
    public final TableField<TalkTemplateRecord, String> WRITE_USERID = createField(DSL.name("write_userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "작성자");

    /**
     * The column <code>eicn.talk_template.ment_name</code>. 멘트명
     */
    public final TableField<TalkTemplateRecord, String> MENT_NAME = createField(DSL.name("ment_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "멘트명");

    /**
     * The column <code>eicn.talk_template.ment</code>. 멘트내용
     */
    public final TableField<TalkTemplateRecord, String> MENT = createField(DSL.name("ment"), org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "멘트내용");

    /**
     * The column <code>eicn.talk_template.company_id</code>. 고객사 아이디
     */
    public final TableField<TalkTemplateRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * Create a <code>eicn.talk_template</code> table reference
     */
    public TalkTemplate() {
        this(DSL.name("talk_template"), null);
    }

    /**
     * Create an aliased <code>eicn.talk_template</code> table reference
     */
    public TalkTemplate(String alias) {
        this(DSL.name(alias), TALK_TEMPLATE);
    }

    /**
     * Create an aliased <code>eicn.talk_template</code> table reference
     */
    public TalkTemplate(Name alias) {
        this(alias, TALK_TEMPLATE);
    }

    private TalkTemplate(Name alias, Table<TalkTemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private TalkTemplate(Name alias, Table<TalkTemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("상담톡 템플릿 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> TalkTemplate(Table<O> child, ForeignKey<O, TalkTemplateRecord> key) {
        super(child, key, TALK_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TALK_TEMPLATE_COMPANY_ID, Indexes.TALK_TEMPLATE_TYPE);
    }

    @Override
    public Identity<TalkTemplateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TALK_TEMPLATE;
    }

    @Override
    public List<UniqueKey<TalkTemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<TalkTemplateRecord>>asList(Keys.KEY_TALK_TEMPLATE_SEQ);
    }

    @Override
    public TalkTemplate as(String alias) {
        return new TalkTemplate(DSL.name(alias), this);
    }

    @Override
    public TalkTemplate as(Name alias) {
        return new TalkTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkTemplate rename(String name) {
        return new TalkTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkTemplate rename(Name name) {
        return new TalkTemplate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
