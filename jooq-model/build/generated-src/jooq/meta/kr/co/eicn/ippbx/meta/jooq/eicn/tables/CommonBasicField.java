/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CommonBasicFieldRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonBasicField extends TableImpl<CommonBasicFieldRecord> {

    private static final long serialVersionUID = 140883758;

    /**
     * The reference instance of <code>eicn.common_basic_field</code>
     */
    public static final CommonBasicField COMMON_BASIC_FIELD = new CommonBasicField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonBasicFieldRecord> getRecordType() {
        return CommonBasicFieldRecord.class;
    }

    /**
     * The column <code>eicn.common_basic_field.seq</code>.
     */
    public final TableField<CommonBasicFieldRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.common_basic_field.id</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.name</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.type</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.service_kind</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> SERVICE_KIND = createField(DSL.name("service_kind"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("SC", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.info</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.isdefault</code>.
     */
    public final TableField<CommonBasicFieldRecord, String> ISDEFAULT = createField(DSL.name("isdefault"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.common_basic_field.field_size</code>.
     */
    public final TableField<CommonBasicFieldRecord, Integer> FIELD_SIZE = createField(DSL.name("field_size"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>eicn.common_basic_field</code> table reference
     */
    public CommonBasicField() {
        this(DSL.name("common_basic_field"), null);
    }

    /**
     * Create an aliased <code>eicn.common_basic_field</code> table reference
     */
    public CommonBasicField(String alias) {
        this(DSL.name(alias), COMMON_BASIC_FIELD);
    }

    /**
     * Create an aliased <code>eicn.common_basic_field</code> table reference
     */
    public CommonBasicField(Name alias) {
        this(alias, COMMON_BASIC_FIELD);
    }

    private CommonBasicField(Name alias, Table<CommonBasicFieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonBasicField(Name alias, Table<CommonBasicFieldRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CommonBasicField(Table<O> child, ForeignKey<O, CommonBasicFieldRecord> key) {
        super(child, key, COMMON_BASIC_FIELD);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<CommonBasicFieldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_BASIC_FIELD;
    }

    @Override
    public List<UniqueKey<CommonBasicFieldRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonBasicFieldRecord>>asList(Keys.KEY_COMMON_BASIC_FIELD_SEQ);
    }

    @Override
    public CommonBasicField as(String alias) {
        return new CommonBasicField(DSL.name(alias), this);
    }

    @Override
    public CommonBasicField as(Name alias) {
        return new CommonBasicField(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonBasicField rename(String name) {
        return new CommonBasicField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonBasicField rename(Name name) {
        return new CommonBasicField(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
