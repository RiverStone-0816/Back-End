/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.customdb.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.customdb.Customdb;
import kr.co.eicn.ippbx.meta.jooq.customdb.Indexes;
import kr.co.eicn.ippbx.meta.jooq.customdb.Keys;
import kr.co.eicn.ippbx.meta.jooq.customdb.tables.records.ChattMsgTest1013Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChattMsgTest1013 extends TableImpl<ChattMsgTest1013Record> {

    private static final long serialVersionUID = -1860630140;

    /**
     * The reference instance of <code>CUSTOMDB.chatt_msg_test1013</code>
     */
    public static final ChattMsgTest1013 CHATT_MSG_TEST1013 = new ChattMsgTest1013();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChattMsgTest1013Record> getRecordType() {
        return ChattMsgTest1013Record.class;
    }

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.seq</code>.
     */
    public final TableField<ChattMsgTest1013Record, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.room_id</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> ROOM_ID = createField(DSL.name("room_id"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.userid</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.insert_time</code>.
     */
    public final TableField<ChattMsgTest1013Record, Timestamp> INSERT_TIME = createField(DSL.name("insert_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.send_receive</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> SEND_RECEIVE = createField(DSL.name("send_receive"), org.jooq.impl.SQLDataType.CHAR(3).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.message_id</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.type</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.chatt_msg_test1013.content</code>.
     */
    public final TableField<ChattMsgTest1013Record, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(1100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>CUSTOMDB.chatt_msg_test1013</code> table reference
     */
    public ChattMsgTest1013() {
        this(DSL.name("chatt_msg_test1013"), null);
    }

    /**
     * Create an aliased <code>CUSTOMDB.chatt_msg_test1013</code> table reference
     */
    public ChattMsgTest1013(String alias) {
        this(DSL.name(alias), CHATT_MSG_TEST1013);
    }

    /**
     * Create an aliased <code>CUSTOMDB.chatt_msg_test1013</code> table reference
     */
    public ChattMsgTest1013(Name alias) {
        this(alias, CHATT_MSG_TEST1013);
    }

    private ChattMsgTest1013(Name alias, Table<ChattMsgTest1013Record> aliased) {
        this(alias, aliased, null);
    }

    private ChattMsgTest1013(Name alias, Table<ChattMsgTest1013Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ChattMsgTest1013(Table<O> child, ForeignKey<O, ChattMsgTest1013Record> key) {
        super(child, key, CHATT_MSG_TEST1013);
    }

    @Override
    public Schema getSchema() {
        return Customdb.CUSTOMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHATT_MSG_TEST1013_INSERT_TIME, Indexes.CHATT_MSG_TEST1013_ROOM_ID, Indexes.CHATT_MSG_TEST1013_USERID);
    }

    @Override
    public Identity<ChattMsgTest1013Record, Integer> getIdentity() {
        return Keys.IDENTITY_CHATT_MSG_TEST1013;
    }

    @Override
    public List<UniqueKey<ChattMsgTest1013Record>> getKeys() {
        return Arrays.<UniqueKey<ChattMsgTest1013Record>>asList(Keys.KEY_CHATT_MSG_TEST1013_SEQ);
    }

    @Override
    public ChattMsgTest1013 as(String alias) {
        return new ChattMsgTest1013(DSL.name(alias), this);
    }

    @Override
    public ChattMsgTest1013 as(Name alias) {
        return new ChattMsgTest1013(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChattMsgTest1013 rename(String name) {
        return new ChattMsgTest1013(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChattMsgTest1013 rename(Name name) {
        return new ChattMsgTest1013(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Timestamp, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
