/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ManualXFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 매뉴얼 첨부파일
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ManualXFile extends TableImpl<ManualXFileRecord> {

    private static final long serialVersionUID = -872006877;

    /**
     * The reference instance of <code>eicn.manual_x_file</code>
     */
    public static final ManualXFile MANUAL_X_FILE = new ManualXFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManualXFileRecord> getRecordType() {
        return ManualXFileRecord.class;
    }

    /**
     * The column <code>eicn.manual_x_file.manual</code>.
     */
    public final TableField<ManualXFileRecord, Long> MANUAL = createField(DSL.name("manual"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>eicn.manual_x_file.file</code>.
     */
    public final TableField<ManualXFileRecord, Long> FILE = createField(DSL.name("file"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>eicn.manual_x_file.company_id</code>.
     */
    public final TableField<ManualXFileRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.manual_x_file</code> table reference
     */
    public ManualXFile() {
        this(DSL.name("manual_x_file"), null);
    }

    /**
     * Create an aliased <code>eicn.manual_x_file</code> table reference
     */
    public ManualXFile(String alias) {
        this(DSL.name(alias), MANUAL_X_FILE);
    }

    /**
     * Create an aliased <code>eicn.manual_x_file</code> table reference
     */
    public ManualXFile(Name alias) {
        this(alias, MANUAL_X_FILE);
    }

    private ManualXFile(Name alias, Table<ManualXFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private ManualXFile(Name alias, Table<ManualXFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("매뉴얼 첨부파일"), TableOptions.table());
    }

    public <O extends Record> ManualXFile(Table<O> child, ForeignKey<O, ManualXFileRecord> key) {
        super(child, key, MANUAL_X_FILE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<ManualXFileRecord> getPrimaryKey() {
        return Keys.KEY_MANUAL_X_FILE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ManualXFileRecord>> getKeys() {
        return Arrays.<UniqueKey<ManualXFileRecord>>asList(Keys.KEY_MANUAL_X_FILE_PRIMARY);
    }

    @Override
    public ManualXFile as(String alias) {
        return new ManualXFile(DSL.name(alias), this);
    }

    @Override
    public ManualXFile as(Name alias) {
        return new ManualXFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ManualXFile rename(String name) {
        return new ManualXFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ManualXFile rename(Name name) {
        return new ManualXFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
