/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.SoundListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 음원관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SoundList extends TableImpl<SoundListRecord> {

    private static final long serialVersionUID = -1461127896;

    /**
     * The reference instance of <code>eicn.sound_list</code>
     */
    public static final SoundList SOUND_LIST = new SoundList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SoundListRecord> getRecordType() {
        return SoundListRecord.class;
    }

    /**
     * The column <code>eicn.sound_list.seq</code>. SEQ
     */
    public final TableField<SoundListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQ");

    /**
     * The column <code>eicn.sound_list.sound_name</code>. 음원명
     */
    public final TableField<SoundListRecord, String> SOUND_NAME = createField(DSL.name("sound_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "음원명");

    /**
     * The column <code>eicn.sound_list.sound_file</code>. 음원파일명
     */
    public final TableField<SoundListRecord, String> SOUND_FILE = createField(DSL.name("sound_file"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "음원파일명");

    /**
     * The column <code>eicn.sound_list.comment</code>. 코멘트
     */
    public final TableField<SoundListRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "코멘트");

    /**
     * The column <code>eicn.sound_list.company_id</code>. 회사아이디
     */
    public final TableField<SoundListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "회사아이디");

    /**
     * The column <code>eicn.sound_list.ars</code>.
     */
    public final TableField<SoundListRecord, Boolean> ARS = createField(DSL.name("ars"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>eicn.sound_list</code> table reference
     */
    public SoundList() {
        this(DSL.name("sound_list"), null);
    }

    /**
     * Create an aliased <code>eicn.sound_list</code> table reference
     */
    public SoundList(String alias) {
        this(DSL.name(alias), SOUND_LIST);
    }

    /**
     * Create an aliased <code>eicn.sound_list</code> table reference
     */
    public SoundList(Name alias) {
        this(alias, SOUND_LIST);
    }

    private SoundList(Name alias, Table<SoundListRecord> aliased) {
        this(alias, aliased, null);
    }

    private SoundList(Name alias, Table<SoundListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("음원관리 테이블"), TableOptions.table());
    }

    public <O extends Record> SoundList(Table<O> child, ForeignKey<O, SoundListRecord> key) {
        super(child, key, SOUND_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<SoundListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SOUND_LIST;
    }

    @Override
    public List<UniqueKey<SoundListRecord>> getKeys() {
        return Arrays.<UniqueKey<SoundListRecord>>asList(Keys.KEY_SOUND_LIST_SEQ);
    }

    @Override
    public SoundList as(String alias) {
        return new SoundList(DSL.name(alias), this);
    }

    @Override
    public SoundList as(Name alias) {
        return new SoundList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SoundList rename(String name) {
        return new SoundList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SoundList rename(Name name) {
        return new SoundList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
