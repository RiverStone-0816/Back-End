/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.GatewayRoutingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GatewayRouting extends TableImpl<GatewayRoutingRecord> {

    private static final long serialVersionUID = 857118511;

    /**
     * The reference instance of <code>eicn.gateway_routing</code>
     */
    public static final GatewayRouting GATEWAY_ROUTING = new GatewayRouting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GatewayRoutingRecord> getRecordType() {
        return GatewayRoutingRecord.class;
    }

    /**
     * The column <code>eicn.gateway_routing.gateway</code>.
     */
    public final TableField<GatewayRoutingRecord, String> GATEWAY = createField(DSL.name("gateway"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("gw.eicn", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.gateway_routing.changedate</code>.
     */
    public final TableField<GatewayRoutingRecord, Timestamp> CHANGEDATE = createField(DSL.name("changedate"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>eicn.gateway_routing</code> table reference
     */
    public GatewayRouting() {
        this(DSL.name("gateway_routing"), null);
    }

    /**
     * Create an aliased <code>eicn.gateway_routing</code> table reference
     */
    public GatewayRouting(String alias) {
        this(DSL.name(alias), GATEWAY_ROUTING);
    }

    /**
     * Create an aliased <code>eicn.gateway_routing</code> table reference
     */
    public GatewayRouting(Name alias) {
        this(alias, GATEWAY_ROUTING);
    }

    private GatewayRouting(Name alias, Table<GatewayRoutingRecord> aliased) {
        this(alias, aliased, null);
    }

    private GatewayRouting(Name alias, Table<GatewayRoutingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GatewayRouting(Table<O> child, ForeignKey<O, GatewayRoutingRecord> key) {
        super(child, key, GATEWAY_ROUTING);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<UniqueKey<GatewayRoutingRecord>> getKeys() {
        return Arrays.<UniqueKey<GatewayRoutingRecord>>asList(Keys.KEY_GATEWAY_ROUTING_GATEWAY);
    }

    @Override
    public GatewayRouting as(String alias) {
        return new GatewayRouting(DSL.name(alias), this);
    }

    @Override
    public GatewayRouting as(Name alias) {
        return new GatewayRouting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GatewayRouting rename(String name) {
        return new GatewayRouting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GatewayRouting rename(Name name) {
        return new GatewayRouting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Timestamp> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
