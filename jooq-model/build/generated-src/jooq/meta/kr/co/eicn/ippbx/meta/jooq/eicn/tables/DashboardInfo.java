/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.enums.DashboardInfoDashboardType;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.DashboardInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 대시보드 리스트 정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardInfo extends TableImpl<DashboardInfoRecord> {

    private static final long serialVersionUID = 547848217;

    /**
     * The reference instance of <code>eicn.dashboard_info</code>
     */
    public static final DashboardInfo DASHBOARD_INFO = new DashboardInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardInfoRecord> getRecordType() {
        return DashboardInfoRecord.class;
    }

    /**
     * The column <code>eicn.dashboard_info.dashboard_id</code>. 시퀀스
     */
    public final TableField<DashboardInfoRecord, Integer> DASHBOARD_ID = createField(DSL.name("dashboard_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "시퀀스");

    /**
     * The column <code>eicn.dashboard_info.dashboard_name</code>. 대시보드 항목 이름
     */
    public final TableField<DashboardInfoRecord, String> DASHBOARD_NAME = createField(DSL.name("dashboard_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "대시보드 항목 이름");

    /**
     * The column <code>eicn.dashboard_info.dashboard_type</code>. 대시보드 항목 타입
     */
    public final TableField<DashboardInfoRecord, DashboardInfoDashboardType> DASHBOARD_TYPE = createField(DSL.name("dashboard_type"), org.jooq.impl.SQLDataType.VARCHAR(19).nullable(false).asEnumDataType(kr.co.eicn.ippbx.meta.jooq.eicn.enums.DashboardInfoDashboardType.class), this, "대시보드 항목 타입");

    /**
     * The column <code>eicn.dashboard_info.dashboard_value</code>. 대시보드 항목 값
     */
    public final TableField<DashboardInfoRecord, String> DASHBOARD_VALUE = createField(DSL.name("dashboard_value"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "대시보드 항목 값");

    /**
     * The column <code>eicn.dashboard_info.dashboard_ui_seq</code>. 대시보드 순서 값
     */
    public final TableField<DashboardInfoRecord, Integer> DASHBOARD_UI_SEQ = createField(DSL.name("dashboard_ui_seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "대시보드 순서 값");

    /**
     * The column <code>eicn.dashboard_info.company_id</code>.
     */
    public final TableField<DashboardInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.dashboard_info</code> table reference
     */
    public DashboardInfo() {
        this(DSL.name("dashboard_info"), null);
    }

    /**
     * Create an aliased <code>eicn.dashboard_info</code> table reference
     */
    public DashboardInfo(String alias) {
        this(DSL.name(alias), DASHBOARD_INFO);
    }

    /**
     * Create an aliased <code>eicn.dashboard_info</code> table reference
     */
    public DashboardInfo(Name alias) {
        this(alias, DASHBOARD_INFO);
    }

    private DashboardInfo(Name alias, Table<DashboardInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DashboardInfo(Name alias, Table<DashboardInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("대시보드 리스트 정보"), TableOptions.table());
    }

    public <O extends Record> DashboardInfo(Table<O> child, ForeignKey<O, DashboardInfoRecord> key) {
        super(child, key, DASHBOARD_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<DashboardInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DASHBOARD_INFO;
    }

    @Override
    public UniqueKey<DashboardInfoRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<DashboardInfoRecord>>asList(Keys.KEY_DASHBOARD_INFO_PRIMARY);
    }

    @Override
    public DashboardInfo as(String alias) {
        return new DashboardInfo(DSL.name(alias), this);
    }

    @Override
    public DashboardInfo as(Name alias) {
        return new DashboardInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardInfo rename(String name) {
        return new DashboardInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardInfo rename(Name name) {
        return new DashboardInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, DashboardInfoDashboardType, String, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
