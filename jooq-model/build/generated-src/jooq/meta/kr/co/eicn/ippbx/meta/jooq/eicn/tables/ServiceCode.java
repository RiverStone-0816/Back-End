/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ServiceCodeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceCode extends TableImpl<ServiceCodeRecord> {

    private static final long serialVersionUID = 988880106;

    /**
     * The reference instance of <code>eicn.service_code</code>
     */
    public static final ServiceCode SERVICE_CODE = new ServiceCode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceCodeRecord> getRecordType() {
        return ServiceCodeRecord.class;
    }

    /**
     * The column <code>eicn.service_code.code</code>.
     */
    public final TableField<ServiceCodeRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.CHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("CST", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.service_code.group_name</code>.
     */
    public final TableField<ServiceCodeRecord, String> GROUP_NAME = createField(DSL.name("group_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.service_code.name</code>.
     */
    public final TableField<ServiceCodeRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.service_code.is_use</code>.
     */
    public final TableField<ServiceCodeRecord, String> IS_USE = createField(DSL.name("is_use"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.service_code.sequence</code>.
     */
    public final TableField<ServiceCodeRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.service_code.info</code>.
     */
    public final TableField<ServiceCodeRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.service_code.service_kind</code>.
     */
    public final TableField<ServiceCodeRecord, String> SERVICE_KIND = createField(DSL.name("service_kind"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("SC", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>eicn.service_code</code> table reference
     */
    public ServiceCode() {
        this(DSL.name("service_code"), null);
    }

    /**
     * Create an aliased <code>eicn.service_code</code> table reference
     */
    public ServiceCode(String alias) {
        this(DSL.name(alias), SERVICE_CODE);
    }

    /**
     * Create an aliased <code>eicn.service_code</code> table reference
     */
    public ServiceCode(Name alias) {
        this(alias, SERVICE_CODE);
    }

    private ServiceCode(Name alias, Table<ServiceCodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceCode(Name alias, Table<ServiceCodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ServiceCode(Table<O> child, ForeignKey<O, ServiceCodeRecord> key) {
        super(child, key, SERVICE_CODE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<ServiceCodeRecord> getPrimaryKey() {
        return Keys.KEY_SERVICE_CODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ServiceCodeRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceCodeRecord>>asList(Keys.KEY_SERVICE_CODE_PRIMARY);
    }

    @Override
    public ServiceCode as(String alias) {
        return new ServiceCode(DSL.name(alias), this);
    }

    @Override
    public ServiceCode as(Name alias) {
        return new ServiceCode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceCode rename(String name) {
        return new ServiceCode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceCode rename(Name name) {
        return new ServiceCode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
