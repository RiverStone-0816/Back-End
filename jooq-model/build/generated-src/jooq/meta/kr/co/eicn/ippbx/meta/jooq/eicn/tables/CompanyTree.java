/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CompanyTreeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 고객사별 조직정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyTree extends TableImpl<CompanyTreeRecord> {

    private static final long serialVersionUID = -650926925;

    /**
     * The reference instance of <code>eicn.company_tree</code>
     */
    public static final CompanyTree COMPANY_TREE = new CompanyTree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyTreeRecord> getRecordType() {
        return CompanyTreeRecord.class;
    }

    /**
     * The column <code>eicn.company_tree.seq</code>. SEQUENCE KEY
     */
    public final TableField<CompanyTreeRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQUENCE KEY");

    /**
     * The column <code>eicn.company_tree.group_code</code>. 같은 group_level 에서 unique한 코드 4자리 ex&gt;0001
     */
    public final TableField<CompanyTreeRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "같은 group_level 에서 unique한 코드 4자리 ex>0001");

    /**
     * The column <code>eicn.company_tree.group_name</code>. 여의도본사 등 조직명
     */
    public final TableField<CompanyTreeRecord, String> GROUP_NAME = createField(DSL.name("group_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "여의도본사 등 조직명");

    /**
     * The column <code>eicn.company_tree.group_tree_name</code>. 윗레벨의 코드를 포함한 코드의 나열 ex&gt;0003_0008_0001
     */
    public final TableField<CompanyTreeRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 코드를 포함한 코드의 나열 ex>0003_0008_0001");

    /**
     * The column <code>eicn.company_tree.group_level</code>. 해당조직의 레벨 MAX 보다 같거나 작을것
     */
    public final TableField<CompanyTreeRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "해당조직의 레벨 MAX 보다 같거나 작을것");

    /**
     * The column <code>eicn.company_tree.parent_group_code</code>. 상위 조직코드
     */
    public final TableField<CompanyTreeRecord, String> PARENT_GROUP_CODE = createField(DSL.name("parent_group_code"), org.jooq.impl.SQLDataType.CHAR(4).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "상위 조직코드");

    /**
     * The column <code>eicn.company_tree.parent_tree_name</code>. 0003_0008
     */
    public final TableField<CompanyTreeRecord, String> PARENT_TREE_NAME = createField(DSL.name("parent_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "0003_0008");

    /**
     * The column <code>eicn.company_tree.company_id</code>. 고객사 아이디
     */
    public final TableField<CompanyTreeRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * Create a <code>eicn.company_tree</code> table reference
     */
    public CompanyTree() {
        this(DSL.name("company_tree"), null);
    }

    /**
     * Create an aliased <code>eicn.company_tree</code> table reference
     */
    public CompanyTree(String alias) {
        this(DSL.name(alias), COMPANY_TREE);
    }

    /**
     * Create an aliased <code>eicn.company_tree</code> table reference
     */
    public CompanyTree(Name alias) {
        this(alias, COMPANY_TREE);
    }

    private CompanyTree(Name alias, Table<CompanyTreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyTree(Name alias, Table<CompanyTreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("고객사별 조직정보"), TableOptions.table());
    }

    public <O extends Record> CompanyTree(Table<O> child, ForeignKey<O, CompanyTreeRecord> key) {
        super(child, key, COMPANY_TREE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_TREE_COMPANY_ID, Indexes.COMPANY_TREE_GROUP_CODE, Indexes.COMPANY_TREE_GROUP_LEVEL, Indexes.COMPANY_TREE_GROUP_TREE_NAME, Indexes.COMPANY_TREE_PARENT_TREE_NAME);
    }

    @Override
    public Identity<CompanyTreeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_TREE;
    }

    @Override
    public List<UniqueKey<CompanyTreeRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyTreeRecord>>asList(Keys.KEY_COMPANY_TREE_SEQ);
    }

    @Override
    public CompanyTree as(String alias) {
        return new CompanyTree(DSL.name(alias), this);
    }

    @Override
    public CompanyTree as(Name alias) {
        return new CompanyTree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTree rename(String name) {
        return new CompanyTree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTree rename(Name name) {
        return new CompanyTree(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Integer, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
