/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.TaskScriptCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 상담스크립트 분류
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskScriptCategory extends TableImpl<TaskScriptCategoryRecord> {

    private static final long serialVersionUID = -809309020;

    /**
     * The reference instance of <code>eicn.task_script_category</code>
     */
    public static final TaskScriptCategory TASK_SCRIPT_CATEGORY = new TaskScriptCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskScriptCategoryRecord> getRecordType() {
        return TaskScriptCategoryRecord.class;
    }

    /**
     * The column <code>eicn.task_script_category.id</code>.
     */
    public final TableField<TaskScriptCategoryRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.task_script_category.name</code>.
     */
    public final TableField<TaskScriptCategoryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>eicn.task_script_category.company_id</code>.
     */
    public final TableField<TaskScriptCategoryRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.task_script_category</code> table reference
     */
    public TaskScriptCategory() {
        this(DSL.name("task_script_category"), null);
    }

    /**
     * Create an aliased <code>eicn.task_script_category</code> table reference
     */
    public TaskScriptCategory(String alias) {
        this(DSL.name(alias), TASK_SCRIPT_CATEGORY);
    }

    /**
     * Create an aliased <code>eicn.task_script_category</code> table reference
     */
    public TaskScriptCategory(Name alias) {
        this(alias, TASK_SCRIPT_CATEGORY);
    }

    private TaskScriptCategory(Name alias, Table<TaskScriptCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskScriptCategory(Name alias, Table<TaskScriptCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("상담스크립트 분류"), TableOptions.table());
    }

    public <O extends Record> TaskScriptCategory(Table<O> child, ForeignKey<O, TaskScriptCategoryRecord> key) {
        super(child, key, TASK_SCRIPT_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<TaskScriptCategoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_TASK_SCRIPT_CATEGORY;
    }

    @Override
    public UniqueKey<TaskScriptCategoryRecord> getPrimaryKey() {
        return Keys.KEY_TASK_SCRIPT_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaskScriptCategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskScriptCategoryRecord>>asList(Keys.KEY_TASK_SCRIPT_CATEGORY_PRIMARY, Keys.KEY_TASK_SCRIPT_CATEGORY_NAME);
    }

    @Override
    public TaskScriptCategory as(String alias) {
        return new TaskScriptCategory(DSL.name(alias), this);
    }

    @Override
    public TaskScriptCategory as(Name alias) {
        return new TaskScriptCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskScriptCategory rename(String name) {
        return new TaskScriptCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskScriptCategory rename(Name name) {
        return new TaskScriptCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
