/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ConGroupRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConGroup extends TableImpl<ConGroupRecord> {

    private static final long serialVersionUID = -1669115096;

    /**
     * The reference instance of <code>eicn.con_group</code>
     */
    public static final ConGroup CON_GROUP = new ConGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConGroupRecord> getRecordType() {
        return ConGroupRecord.class;
    }

    /**
     * The column <code>eicn.con_group.seq</code>.
     */
    public final TableField<ConGroupRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.con_group.name</code>. 연동그룹명
     */
    public final TableField<ConGroupRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "연동그룹명");

    /**
     * The column <code>eicn.con_group.total_cnt</code>. 데이터수
     */
    public final TableField<ConGroupRecord, Integer> TOTAL_CNT = createField(DSL.name("total_cnt"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "데이터수");

    /**
     * The column <code>eicn.con_group.con_type</code>. 연동DB 유형
     */
    public final TableField<ConGroupRecord, Integer> CON_TYPE = createField(DSL.name("con_type"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "연동DB 유형");

    /**
     * The column <code>eicn.con_group.info</code>. 추가정보
     */
    public final TableField<ConGroupRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "추가정보");

    /**
     * The column <code>eicn.con_group.group_code</code>.
     */
    public final TableField<ConGroupRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.con_group.group_tree_name</code>.
     */
    public final TableField<ConGroupRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.con_group.group_level</code>.
     */
    public final TableField<ConGroupRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.con_group.company_id</code>. 회사아이디
     */
    public final TableField<ConGroupRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "회사아이디");

    /**
     * Create a <code>eicn.con_group</code> table reference
     */
    public ConGroup() {
        this(DSL.name("con_group"), null);
    }

    /**
     * Create an aliased <code>eicn.con_group</code> table reference
     */
    public ConGroup(String alias) {
        this(DSL.name(alias), CON_GROUP);
    }

    /**
     * Create an aliased <code>eicn.con_group</code> table reference
     */
    public ConGroup(Name alias) {
        this(alias, CON_GROUP);
    }

    private ConGroup(Name alias, Table<ConGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConGroup(Name alias, Table<ConGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ConGroup(Table<O> child, ForeignKey<O, ConGroupRecord> key) {
        super(child, key, CON_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CON_GROUP_COMPANY_ID, Indexes.CON_GROUP_NAME);
    }

    @Override
    public Identity<ConGroupRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CON_GROUP;
    }

    @Override
    public UniqueKey<ConGroupRecord> getPrimaryKey() {
        return Keys.KEY_CON_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<ConGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<ConGroupRecord>>asList(Keys.KEY_CON_GROUP_PRIMARY);
    }

    @Override
    public ConGroup as(String alias) {
        return new ConGroup(DSL.name(alias), this);
    }

    @Override
    public ConGroup as(Name alias) {
        return new ConGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConGroup rename(String name) {
        return new ConGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConGroup rename(Name name) {
        return new ConGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Integer, Integer, String, String, String, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
