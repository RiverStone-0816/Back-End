/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.QueueTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 실질적으로 전화기에서 참조하는 테이블이다.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QueueTable extends TableImpl<QueueTableRecord> {

    private static final long serialVersionUID = -849572684;

    /**
     * The reference instance of <code>eicn.queue_table</code>
     */
    public static final QueueTable QUEUE_TABLE = new QueueTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QueueTableRecord> getRecordType() {
        return QueueTableRecord.class;
    }

    /**
     * The column <code>eicn.queue_table.name</code>. queue 이름
     */
    public final TableField<QueueTableRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "queue 이름");

    /**
     * The column <code>eicn.queue_table.musiconhold</code>.
     */
    public final TableField<QueueTableRecord, String> MUSICONHOLD = createField(DSL.name("musiconhold"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.announce</code>.
     */
    public final TableField<QueueTableRecord, String> ANNOUNCE = createField(DSL.name("announce"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.context</code>.
     */
    public final TableField<QueueTableRecord, String> CONTEXT = createField(DSL.name("context"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.timeout</code>. 타임아웃시간
     */
    public final TableField<QueueTableRecord, Integer> TIMEOUT = createField(DSL.name("timeout"), org.jooq.impl.SQLDataType.INTEGER, this, "타임아웃시간");

    /**
     * The column <code>eicn.queue_table.monitor_type</code>. 1
     */
    public final TableField<QueueTableRecord, String> MONITOR_TYPE = createField(DSL.name("monitor_type"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "1");

    /**
     * The column <code>eicn.queue_table.monitor_format</code>. wav
     */
    public final TableField<QueueTableRecord, String> MONITOR_FORMAT = createField(DSL.name("monitor_format"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "wav");

    /**
     * The column <code>eicn.queue_table.queue_youarenext</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_YOUARENEXT = createField(DSL.name("queue_youarenext"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_thereare</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_THEREARE = createField(DSL.name("queue_thereare"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_callswaiting</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_CALLSWAITING = createField(DSL.name("queue_callswaiting"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_holdtime</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_HOLDTIME = createField(DSL.name("queue_holdtime"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_minutes</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_MINUTES = createField(DSL.name("queue_minutes"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_seconds</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_SECONDS = createField(DSL.name("queue_seconds"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_lessthan</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_LESSTHAN = createField(DSL.name("queue_lessthan"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_thankyou</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_THANKYOU = createField(DSL.name("queue_thankyou"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.queue_reporthold</code>.
     */
    public final TableField<QueueTableRecord, String> QUEUE_REPORTHOLD = createField(DSL.name("queue_reporthold"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.announce_frequency</code>.
     */
    public final TableField<QueueTableRecord, Integer> ANNOUNCE_FREQUENCY = createField(DSL.name("announce_frequency"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.announce_round_seconds</code>.
     */
    public final TableField<QueueTableRecord, Integer> ANNOUNCE_ROUND_SECONDS = createField(DSL.name("announce_round_seconds"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.announce_holdtime</code>.
     */
    public final TableField<QueueTableRecord, String> ANNOUNCE_HOLDTIME = createField(DSL.name("announce_holdtime"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.retry</code>.
     */
    public final TableField<QueueTableRecord, Integer> RETRY = createField(DSL.name("retry"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.wrapuptime</code>.
     */
    public final TableField<QueueTableRecord, Integer> WRAPUPTIME = createField(DSL.name("wrapuptime"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.maxlen</code>. 상담원대기여부int
     */
    public final TableField<QueueTableRecord, Integer> MAXLEN = createField(DSL.name("maxlen"), org.jooq.impl.SQLDataType.INTEGER, this, "상담원대기여부int");

    /**
     * The column <code>eicn.queue_table.servicelevel</code>.
     */
    public final TableField<QueueTableRecord, Integer> SERVICELEVEL = createField(DSL.name("servicelevel"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.strategy</code>. 분배정책
     */
    public final TableField<QueueTableRecord, String> STRATEGY = createField(DSL.name("strategy"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "분배정책");

    /**
     * The column <code>eicn.queue_table.joinempty</code>.
     */
    public final TableField<QueueTableRecord, String> JOINEMPTY = createField(DSL.name("joinempty"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>eicn.queue_table.leavewhenempty</code>. "대기:no,나갈경우:inuse,ringing,paused,invalid,unavailable
대기상담없을경우 설정처리"
     */
    public final TableField<QueueTableRecord, String> LEAVEWHENEMPTY = createField(DSL.name("leavewhenempty"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "\"대기:no,나갈경우:inuse,ringing,paused,invalid,unavailable\n대기상담없을경우 설정처리\"");

    /**
     * The column <code>eicn.queue_table.eventmemberstatus</code>.
     */
    public final TableField<QueueTableRecord, Boolean> EVENTMEMBERSTATUS = createField(DSL.name("eventmemberstatus"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eicn.queue_table.eventwhencalled</code>.
     */
    public final TableField<QueueTableRecord, Boolean> EVENTWHENCALLED = createField(DSL.name("eventwhencalled"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eicn.queue_table.reportholdtime</code>.
     */
    public final TableField<QueueTableRecord, Boolean> REPORTHOLDTIME = createField(DSL.name("reportholdtime"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eicn.queue_table.memberdelay</code>.
     */
    public final TableField<QueueTableRecord, Integer> MEMBERDELAY = createField(DSL.name("memberdelay"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.weight</code>.
     */
    public final TableField<QueueTableRecord, Integer> WEIGHT = createField(DSL.name("weight"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.timeoutrestart</code>.
     */
    public final TableField<QueueTableRecord, Boolean> TIMEOUTRESTART = createField(DSL.name("timeoutrestart"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eicn.queue_table.periodic_announce</code>.
     */
    public final TableField<QueueTableRecord, String> PERIODIC_ANNOUNCE = createField(DSL.name("periodic_announce"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>eicn.queue_table.periodic_announce_frequency</code>.
     */
    public final TableField<QueueTableRecord, Integer> PERIODIC_ANNOUNCE_FREQUENCY = createField(DSL.name("periodic_announce_frequency"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.queue_table.ringinuse</code>.
     */
    public final TableField<QueueTableRecord, Boolean> RINGINUSE = createField(DSL.name("ringinuse"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>eicn.queue_table.setinterfacevar</code>.
     */
    public final TableField<QueueTableRecord, Boolean> SETINTERFACEVAR = createField(DSL.name("setinterfacevar"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>eicn.queue_table</code> table reference
     */
    public QueueTable() {
        this(DSL.name("queue_table"), null);
    }

    /**
     * Create an aliased <code>eicn.queue_table</code> table reference
     */
    public QueueTable(String alias) {
        this(DSL.name(alias), QUEUE_TABLE);
    }

    /**
     * Create an aliased <code>eicn.queue_table</code> table reference
     */
    public QueueTable(Name alias) {
        this(alias, QUEUE_TABLE);
    }

    private QueueTable(Name alias, Table<QueueTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private QueueTable(Name alias, Table<QueueTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("실질적으로 전화기에서 참조하는 테이블이다."), TableOptions.table());
    }

    public <O extends Record> QueueTable(Table<O> child, ForeignKey<O, QueueTableRecord> key) {
        super(child, key, QUEUE_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<QueueTableRecord> getPrimaryKey() {
        return Keys.KEY_QUEUE_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<QueueTableRecord>> getKeys() {
        return Arrays.<UniqueKey<QueueTableRecord>>asList(Keys.KEY_QUEUE_TABLE_PRIMARY);
    }

    @Override
    public QueueTable as(String alias) {
        return new QueueTable(DSL.name(alias), this);
    }

    @Override
    public QueueTable as(Name alias) {
        return new QueueTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueTable rename(String name) {
        return new QueueTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QueueTable rename(Name name) {
        return new QueueTable(name, null);
    }
}
