/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RecordEncFileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordEncFile extends TableImpl<RecordEncFileRecord> {

    private static final long serialVersionUID = -444705862;

    /**
     * The reference instance of <code>eicn.record_enc_file</code>
     */
    public static final RecordEncFile RECORD_ENC_FILE = new RecordEncFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordEncFileRecord> getRecordType() {
        return RecordEncFileRecord.class;
    }

    /**
     * The column <code>eicn.record_enc_file.company_id</code>.
     */
    public final TableField<RecordEncFileRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_enc_file.record_file</code>.
     */
    public final TableField<RecordEncFileRecord, String> RECORD_FILE = createField(DSL.name("record_file"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_enc_file.create_time</code>.
     */
    public final TableField<RecordEncFileRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.record_enc_file.key_id</code>.
     */
    public final TableField<RecordEncFileRecord, Integer> KEY_ID = createField(DSL.name("key_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eicn.record_enc_file.enc_alg</code>.
     */
    public final TableField<RecordEncFileRecord, String> ENC_ALG = createField(DSL.name("enc_alg"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>eicn.record_enc_file</code> table reference
     */
    public RecordEncFile() {
        this(DSL.name("record_enc_file"), null);
    }

    /**
     * Create an aliased <code>eicn.record_enc_file</code> table reference
     */
    public RecordEncFile(String alias) {
        this(DSL.name(alias), RECORD_ENC_FILE);
    }

    /**
     * Create an aliased <code>eicn.record_enc_file</code> table reference
     */
    public RecordEncFile(Name alias) {
        this(alias, RECORD_ENC_FILE);
    }

    private RecordEncFile(Name alias, Table<RecordEncFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecordEncFile(Name alias, Table<RecordEncFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RecordEncFile(Table<O> child, ForeignKey<O, RecordEncFileRecord> key) {
        super(child, key, RECORD_ENC_FILE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<UniqueKey<RecordEncFileRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordEncFileRecord>>asList(Keys.KEY_RECORD_ENC_FILE_RECORD_FILE);
    }

    @Override
    public RecordEncFile as(String alias) {
        return new RecordEncFile(DSL.name(alias), this);
    }

    @Override
    public RecordEncFile as(Name alias) {
        return new RecordEncFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEncFile rename(String name) {
        return new RecordEncFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEncFile rename(Name name) {
        return new RecordEncFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Timestamp, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
