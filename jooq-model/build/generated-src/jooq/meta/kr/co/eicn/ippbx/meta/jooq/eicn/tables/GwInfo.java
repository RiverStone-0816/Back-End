/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.GwInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 게이트웨이 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GwInfo extends TableImpl<GwInfoRecord> {

    private static final long serialVersionUID = 1219866741;

    /**
     * The reference instance of <code>eicn.gw_info</code>
     */
    public static final GwInfo GW_INFO = new GwInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GwInfoRecord> getRecordType() {
        return GwInfoRecord.class;
    }

    /**
     * The column <code>eicn.gw_info.host</code>. 서버아이디
     */
    public final TableField<GwInfoRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버아이디");

    /**
     * The column <code>eicn.gw_info.ip</code>. VIP
     */
    public final TableField<GwInfoRecord, String> IP = createField(DSL.name("ip"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "VIP");

    /**
     * The column <code>eicn.gw_info.ip1</code>. MASTER
     */
    public final TableField<GwInfoRecord, String> IP1 = createField(DSL.name("ip1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "MASTER");

    /**
     * The column <code>eicn.gw_info.ip2</code>. SLAVE
     */
    public final TableField<GwInfoRecord, String> IP2 = createField(DSL.name("ip2"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "SLAVE");

    /**
     * The column <code>eicn.gw_info.name</code>. 서버명
     */
    public final TableField<GwInfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버명");

    /**
     * The column <code>eicn.gw_info.type</code>. 서버유형
     */
    public final TableField<GwInfoRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("P", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버유형");

    /**
     * The column <code>eicn.gw_info.number_num</code>.
     */
    public final TableField<GwInfoRecord, Integer> NUMBER_NUM = createField(DSL.name("number_num"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.gw_info.is_default</code>.
     */
    public final TableField<GwInfoRecord, String> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.gw_info.trunk_ids</code>.
     */
    public final TableField<GwInfoRecord, String> TRUNK_IDS = createField(DSL.name("trunk_ids"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.gw_info</code> table reference
     */
    public GwInfo() {
        this(DSL.name("gw_info"), null);
    }

    /**
     * Create an aliased <code>eicn.gw_info</code> table reference
     */
    public GwInfo(String alias) {
        this(DSL.name(alias), GW_INFO);
    }

    /**
     * Create an aliased <code>eicn.gw_info</code> table reference
     */
    public GwInfo(Name alias) {
        this(alias, GW_INFO);
    }

    private GwInfo(Name alias, Table<GwInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private GwInfo(Name alias, Table<GwInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("게이트웨이 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> GwInfo(Table<O> child, ForeignKey<O, GwInfoRecord> key) {
        super(child, key, GW_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GW_INFO_IP);
    }

    @Override
    public List<UniqueKey<GwInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<GwInfoRecord>>asList(Keys.KEY_GW_INFO_HOST);
    }

    @Override
    public GwInfo as(String alias) {
        return new GwInfo(DSL.name(alias), this);
    }

    @Override
    public GwInfo as(Name alias) {
        return new GwInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GwInfo rename(String name) {
        return new GwInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GwInfo rename(Name name) {
        return new GwInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, Integer, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
