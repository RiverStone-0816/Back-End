/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.TaskScriptRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 상담스크립트
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskScript extends TableImpl<TaskScriptRecord> {

    private static final long serialVersionUID = -34343429;

    /**
     * The reference instance of <code>eicn.task_script</code>
     */
    public static final TaskScript TASK_SCRIPT = new TaskScript();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskScriptRecord> getRecordType() {
        return TaskScriptRecord.class;
    }

    /**
     * The column <code>eicn.task_script.id</code>.
     */
    public final TableField<TaskScriptRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.task_script.category</code>. 상담스크립트 분류
     */
    public final TableField<TaskScriptRecord, Long> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "상담스크립트 분류");

    /**
     * The column <code>eicn.task_script.tag</code>. 태그
     */
    public final TableField<TaskScriptRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "태그");

    /**
     * The column <code>eicn.task_script.title</code>. 제목
     */
    public final TableField<TaskScriptRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "제목");

    /**
     * The column <code>eicn.task_script.content</code>. 내용
     */
    public final TableField<TaskScriptRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "내용");

    /**
     * The column <code>eicn.task_script.created_at</code>.
     */
    public final TableField<TaskScriptRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.task_script.company_id</code>.
     */
    public final TableField<TaskScriptRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.task_script</code> table reference
     */
    public TaskScript() {
        this(DSL.name("task_script"), null);
    }

    /**
     * Create an aliased <code>eicn.task_script</code> table reference
     */
    public TaskScript(String alias) {
        this(DSL.name(alias), TASK_SCRIPT);
    }

    /**
     * Create an aliased <code>eicn.task_script</code> table reference
     */
    public TaskScript(Name alias) {
        this(alias, TASK_SCRIPT);
    }

    private TaskScript(Name alias, Table<TaskScriptRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskScript(Name alias, Table<TaskScriptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("상담스크립트"), TableOptions.table());
    }

    public <O extends Record> TaskScript(Table<O> child, ForeignKey<O, TaskScriptRecord> key) {
        super(child, key, TASK_SCRIPT);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_SCRIPT_FK_TASK_SCRIPT_CATEGORY_TASK_SCRIPT_CATEGORY_ID);
    }

    @Override
    public Identity<TaskScriptRecord, Long> getIdentity() {
        return Keys.IDENTITY_TASK_SCRIPT;
    }

    @Override
    public UniqueKey<TaskScriptRecord> getPrimaryKey() {
        return Keys.KEY_TASK_SCRIPT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TaskScriptRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskScriptRecord>>asList(Keys.KEY_TASK_SCRIPT_PRIMARY);
    }

    @Override
    public TaskScript as(String alias) {
        return new TaskScript(DSL.name(alias), this);
    }

    @Override
    public TaskScript as(Name alias) {
        return new TaskScript(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskScript rename(String name) {
        return new TaskScript(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskScript rename(Name name) {
        return new TaskScript(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, String, String, String, Timestamp, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
