/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CommonMemberRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonMember extends TableImpl<CommonMemberRecord> {

    private static final long serialVersionUID = 592320816;

    /**
     * The reference instance of <code>eicn.common_member</code>
     */
    public static final CommonMember COMMON_MEMBER = new CommonMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommonMemberRecord> getRecordType() {
        return CommonMemberRecord.class;
    }

    /**
     * The column <code>eicn.common_member.seq</code>.
     */
    public final TableField<CommonMemberRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.common_member.group_id</code>.
     */
    public final TableField<CommonMemberRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.common_member.group_kind</code>.
     */
    public final TableField<CommonMemberRecord, String> GROUP_KIND = createField(DSL.name("group_kind"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("CST", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.common_member.userid</code>.
     */
    public final TableField<CommonMemberRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>eicn.common_member.reserve_seq</code>.
     */
    public final TableField<CommonMemberRecord, Integer> RESERVE_SEQ = createField(DSL.name("reserve_seq"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.common_member.company_id</code>.
     */
    public final TableField<CommonMemberRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.common_member</code> table reference
     */
    public CommonMember() {
        this(DSL.name("common_member"), null);
    }

    /**
     * Create an aliased <code>eicn.common_member</code> table reference
     */
    public CommonMember(String alias) {
        this(DSL.name(alias), COMMON_MEMBER);
    }

    /**
     * Create an aliased <code>eicn.common_member</code> table reference
     */
    public CommonMember(Name alias) {
        this(alias, COMMON_MEMBER);
    }

    private CommonMember(Name alias, Table<CommonMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommonMember(Name alias, Table<CommonMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CommonMember(Table<O> child, ForeignKey<O, CommonMemberRecord> key) {
        super(child, key, COMMON_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMON_MEMBER_COMPANY_ID, Indexes.COMMON_MEMBER_GROUP_KIND);
    }

    @Override
    public Identity<CommonMemberRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMON_MEMBER;
    }

    @Override
    public UniqueKey<CommonMemberRecord> getPrimaryKey() {
        return Keys.KEY_COMMON_MEMBER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommonMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<CommonMemberRecord>>asList(Keys.KEY_COMMON_MEMBER_PRIMARY);
    }

    @Override
    public CommonMember as(String alias) {
        return new CommonMember(DSL.name(alias), this);
    }

    @Override
    public CommonMember as(Name alias) {
        return new CommonMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonMember rename(String name) {
        return new CommonMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommonMember rename(Name name) {
        return new CommonMember(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
