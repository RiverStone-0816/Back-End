/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ScheduleInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 스케쥴 일정 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScheduleInfo extends TableImpl<ScheduleInfoRecord> {

    private static final long serialVersionUID = 1819929881;

    /**
     * The reference instance of <code>eicn.schedule_info</code>
     */
    public static final ScheduleInfo SCHEDULE_INFO = new ScheduleInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScheduleInfoRecord> getRecordType() {
        return ScheduleInfoRecord.class;
    }

    /**
     * The column <code>eicn.schedule_info.seq</code>. 고유키
     */
    public final TableField<ScheduleInfoRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "고유키");

    /**
     * The column <code>eicn.schedule_info.type</code>. 스케쥴러 구분(WEEK:주간, DAY:일별)
     */
    public final TableField<ScheduleInfoRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("W", org.jooq.impl.SQLDataType.CHAR)), this, "스케쥴러 구분(WEEK:주간, DAY:일별)");

    /**
     * The column <code>eicn.schedule_info.number</code>.
     */
    public final TableField<ScheduleInfoRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.schedule_info.week</code>. W:주간, H:일간
     */
    public final TableField<ScheduleInfoRecord, String> WEEK = createField(DSL.name("week"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "W:주간, H:일간");

    /**
     * The column <code>eicn.schedule_info.fromdate</code>. 스케쥴러 종료일
     */
    public final TableField<ScheduleInfoRecord, Date> FROMDATE = createField(DSL.name("fromdate"), org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.inline("2016-01-01", org.jooq.impl.SQLDataType.DATE)), this, "스케쥴러 종료일");

    /**
     * The column <code>eicn.schedule_info.todate</code>. 스케쥴러 적용 시작일
     */
    public final TableField<ScheduleInfoRecord, Date> TODATE = createField(DSL.name("todate"), org.jooq.impl.SQLDataType.DATE.defaultValue(org.jooq.impl.DSL.inline("2016-01-01", org.jooq.impl.SQLDataType.DATE)), this, "스케쥴러 적용 시작일");

    /**
     * The column <code>eicn.schedule_info.group_id</code>. 스케쥴 유형 그룹 아이디
     */
    public final TableField<ScheduleInfoRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "스케쥴 유형 그룹 아이디");

    /**
     * The column <code>eicn.schedule_info.group_code</code>. 같은 group_level 에서 unique한 코드 4자리 ex&gt;0001
     */
    public final TableField<ScheduleInfoRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4), this, "같은 group_level 에서 unique한 코드 4자리 ex>0001");

    /**
     * The column <code>eicn.schedule_info.group_tree_name</code>. 윗레벨의 코드를 포함한 코드의 나열 ex&gt;0003_0008_0001
     */
    public final TableField<ScheduleInfoRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 코드를 포함한 코드의 나열 ex>0003_0008_0001");

    /**
     * The column <code>eicn.schedule_info.group_level</code>. 해당조직의 레벨 MAX 보다 같거나 작을것
     */
    public final TableField<ScheduleInfoRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "해당조직의 레벨 MAX 보다 같거나 작을것");

    /**
     * The column <code>eicn.schedule_info.company_id</code>. 회사 아이디
     */
    public final TableField<ScheduleInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "회사 아이디");

    /**
     * The column <code>eicn.schedule_info.is_stat</code>. 통계적용여부 Y N
     */
    public final TableField<ScheduleInfoRecord, String> IS_STAT = createField(DSL.name("is_stat"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "통계적용여부 Y N");

    /**
     * Create a <code>eicn.schedule_info</code> table reference
     */
    public ScheduleInfo() {
        this(DSL.name("schedule_info"), null);
    }

    /**
     * Create an aliased <code>eicn.schedule_info</code> table reference
     */
    public ScheduleInfo(String alias) {
        this(DSL.name(alias), SCHEDULE_INFO);
    }

    /**
     * Create an aliased <code>eicn.schedule_info</code> table reference
     */
    public ScheduleInfo(Name alias) {
        this(alias, SCHEDULE_INFO);
    }

    private ScheduleInfo(Name alias, Table<ScheduleInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScheduleInfo(Name alias, Table<ScheduleInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("스케쥴 일정 테이블"), TableOptions.table());
    }

    public <O extends Record> ScheduleInfo(Table<O> child, ForeignKey<O, ScheduleInfoRecord> key) {
        super(child, key, SCHEDULE_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEDULE_INFO_GROUP_ID, Indexes.SCHEDULE_INFO_NUMBER, Indexes.SCHEDULE_INFO_WEEK);
    }

    @Override
    public Identity<ScheduleInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHEDULE_INFO;
    }

    @Override
    public List<UniqueKey<ScheduleInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<ScheduleInfoRecord>>asList(Keys.KEY_SCHEDULE_INFO_SEQ);
    }

    @Override
    public ScheduleInfo as(String alias) {
        return new ScheduleInfo(DSL.name(alias), this);
    }

    @Override
    public ScheduleInfo as(Name alias) {
        return new ScheduleInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduleInfo rename(String name) {
        return new ScheduleInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScheduleInfo rename(Name name) {
        return new ScheduleInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, Date, Date, Integer, String, String, Integer, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
