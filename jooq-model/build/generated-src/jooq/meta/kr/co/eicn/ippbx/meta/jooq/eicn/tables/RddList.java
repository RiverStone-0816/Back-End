/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RddListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RddList extends TableImpl<RddListRecord> {

    private static final long serialVersionUID = 2047865671;

    /**
     * The reference instance of <code>eicn.rdd_list</code>
     */
    public static final RddList RDD_LIST = new RddList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RddListRecord> getRecordType() {
        return RddListRecord.class;
    }

    /**
     * The column <code>eicn.rdd_list.seq</code>.
     */
    public final TableField<RddListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.rdd_list.group_id</code>.
     */
    public final TableField<RddListRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.rdd_list.mid_num</code>.
     */
    public final TableField<RddListRecord, String> MID_NUM = createField(DSL.name("mid_num"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.rdd_list.end_num</code>.
     */
    public final TableField<RddListRecord, String> END_NUM = createField(DSL.name("end_num"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.rdd_list</code> table reference
     */
    public RddList() {
        this(DSL.name("rdd_list"), null);
    }

    /**
     * Create an aliased <code>eicn.rdd_list</code> table reference
     */
    public RddList(String alias) {
        this(DSL.name(alias), RDD_LIST);
    }

    /**
     * Create an aliased <code>eicn.rdd_list</code> table reference
     */
    public RddList(Name alias) {
        this(alias, RDD_LIST);
    }

    private RddList(Name alias, Table<RddListRecord> aliased) {
        this(alias, aliased, null);
    }

    private RddList(Name alias, Table<RddListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RddList(Table<O> child, ForeignKey<O, RddListRecord> key) {
        super(child, key, RDD_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<RddListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RDD_LIST;
    }

    @Override
    public List<UniqueKey<RddListRecord>> getKeys() {
        return Arrays.<UniqueKey<RddListRecord>>asList(Keys.KEY_RDD_LIST_SEQ);
    }

    @Override
    public RddList as(String alias) {
        return new RddList(DSL.name(alias), this);
    }

    @Override
    public RddList as(Name alias) {
        return new RddList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RddList rename(String name) {
        return new RddList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RddList rename(Name name) {
        return new RddList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
