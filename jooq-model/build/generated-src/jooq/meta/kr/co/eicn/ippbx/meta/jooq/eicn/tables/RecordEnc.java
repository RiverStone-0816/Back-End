/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RecordEncRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 고객사의 암호화방식 정보테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordEnc extends TableImpl<RecordEncRecord> {

    private static final long serialVersionUID = 1438910757;

    /**
     * The reference instance of <code>eicn.record_enc</code>
     */
    public static final RecordEnc RECORD_ENC = new RecordEnc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordEncRecord> getRecordType() {
        return RecordEncRecord.class;
    }

    /**
     * The column <code>eicn.record_enc.company_id</code>. 고객사 아이디
     */
    public final TableField<RecordEncRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * The column <code>eicn.record_enc.enable</code>. 암호화방식 구분(N:사용안함, B:AES_256, Y:ZIP)
     */
    public final TableField<RecordEncRecord, String> ENABLE = createField(DSL.name("enable"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "암호화방식 구분(N:사용안함, B:AES_256, Y:ZIP)");

    /**
     * The column <code>eicn.record_enc.key_id</code>.
     */
    public final TableField<RecordEncRecord, Integer> KEY_ID = createField(DSL.name("key_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>eicn.record_enc.extern_player</code>. 전용플레어 사용유무
     */
    public final TableField<RecordEncRecord, String> EXTERN_PLAYER = createField(DSL.name("extern_player"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "전용플레어 사용유무");

    /**
     * Create a <code>eicn.record_enc</code> table reference
     */
    public RecordEnc() {
        this(DSL.name("record_enc"), null);
    }

    /**
     * Create an aliased <code>eicn.record_enc</code> table reference
     */
    public RecordEnc(String alias) {
        this(DSL.name(alias), RECORD_ENC);
    }

    /**
     * Create an aliased <code>eicn.record_enc</code> table reference
     */
    public RecordEnc(Name alias) {
        this(alias, RECORD_ENC);
    }

    private RecordEnc(Name alias, Table<RecordEncRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecordEnc(Name alias, Table<RecordEncRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("고객사의 암호화방식 정보테이블"), TableOptions.table());
    }

    public <O extends Record> RecordEnc(Table<O> child, ForeignKey<O, RecordEncRecord> key) {
        super(child, key, RECORD_ENC);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public UniqueKey<RecordEncRecord> getPrimaryKey() {
        return Keys.KEY_RECORD_ENC_PRIMARY;
    }

    @Override
    public List<UniqueKey<RecordEncRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordEncRecord>>asList(Keys.KEY_RECORD_ENC_PRIMARY);
    }

    @Override
    public RecordEnc as(String alias) {
        return new RecordEnc(DSL.name(alias), this);
    }

    @Override
    public RecordEnc as(Name alias) {
        return new RecordEnc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEnc rename(String name) {
        return new RecordEnc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEnc rename(Name name) {
        return new RecordEnc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
