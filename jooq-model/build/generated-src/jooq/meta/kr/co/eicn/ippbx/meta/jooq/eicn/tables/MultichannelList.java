/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.MultichannelListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MultichannelList extends TableImpl<MultichannelListRecord> {

    private static final long serialVersionUID = 839690157;

    /**
     * The reference instance of <code>eicn.multichannel_list</code>
     */
    public static final MultichannelList MULTICHANNEL_LIST = new MultichannelList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultichannelListRecord> getRecordType() {
        return MultichannelListRecord.class;
    }

    /**
     * The column <code>eicn.multichannel_list.seq</code>.
     */
    public final TableField<MultichannelListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.multichannel_list.type</code>.
     */
    public final TableField<MultichannelListRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.target_id</code>.
     */
    public final TableField<MultichannelListRecord, Integer> TARGET_ID = createField(DSL.name("target_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.multichannel_list.status</code>.
     */
    public final TableField<MultichannelListRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.date1</code>.
     */
    public final TableField<MultichannelListRecord, Timestamp> DATE1 = createField(DSL.name("date1"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.multichannel_list.date2</code>.
     */
    public final TableField<MultichannelListRecord, Timestamp> DATE2 = createField(DSL.name("date2"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.multichannel_list.userid1</code>.
     */
    public final TableField<MultichannelListRecord, String> USERID1 = createField(DSL.name("userid1"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.username1</code>.
     */
    public final TableField<MultichannelListRecord, String> USERNAME1 = createField(DSL.name("username1"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.userid2</code>.
     */
    public final TableField<MultichannelListRecord, String> USERID2 = createField(DSL.name("userid2"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.username2</code>.
     */
    public final TableField<MultichannelListRecord, String> USERNAME2 = createField(DSL.name("username2"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.custom_id</code>.
     */
    public final TableField<MultichannelListRecord, Integer> CUSTOM_ID = createField(DSL.name("custom_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.multichannel_list.custom_comp</code>.
     */
    public final TableField<MultichannelListRecord, String> CUSTOM_COMP = createField(DSL.name("custom_comp"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.custom_name</code>.
     */
    public final TableField<MultichannelListRecord, String> CUSTOM_NAME = createField(DSL.name("custom_name"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.company_id</code>.
     */
    public final TableField<MultichannelListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.subject</code>.
     */
    public final TableField<MultichannelListRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.multichannel_list.service_name</code>.
     */
    public final TableField<MultichannelListRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.multichannel_list</code> table reference
     */
    public MultichannelList() {
        this(DSL.name("multichannel_list"), null);
    }

    /**
     * Create an aliased <code>eicn.multichannel_list</code> table reference
     */
    public MultichannelList(String alias) {
        this(DSL.name(alias), MULTICHANNEL_LIST);
    }

    /**
     * Create an aliased <code>eicn.multichannel_list</code> table reference
     */
    public MultichannelList(Name alias) {
        this(alias, MULTICHANNEL_LIST);
    }

    private MultichannelList(Name alias, Table<MultichannelListRecord> aliased) {
        this(alias, aliased, null);
    }

    private MultichannelList(Name alias, Table<MultichannelListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MultichannelList(Table<O> child, ForeignKey<O, MultichannelListRecord> key) {
        super(child, key, MULTICHANNEL_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MULTICHANNEL_LIST_COMPANY_ID, Indexes.MULTICHANNEL_LIST_CUSTOM_ID, Indexes.MULTICHANNEL_LIST_USERID1, Indexes.MULTICHANNEL_LIST_USERID2);
    }

    @Override
    public Identity<MultichannelListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MULTICHANNEL_LIST;
    }

    @Override
    public UniqueKey<MultichannelListRecord> getPrimaryKey() {
        return Keys.KEY_MULTICHANNEL_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<MultichannelListRecord>> getKeys() {
        return Arrays.<UniqueKey<MultichannelListRecord>>asList(Keys.KEY_MULTICHANNEL_LIST_PRIMARY);
    }

    @Override
    public MultichannelList as(String alias) {
        return new MultichannelList(DSL.name(alias), this);
    }

    @Override
    public MultichannelList as(Name alias) {
        return new MultichannelList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelList rename(String name) {
        return new MultichannelList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultichannelList rename(Name name) {
        return new MultichannelList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Integer, String, Integer, String, Timestamp, Timestamp, String, String, String, String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
