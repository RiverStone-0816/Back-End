/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.NoticeboardRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Noticeboard extends TableImpl<NoticeboardRecord> {

    private static final long serialVersionUID = 162346719;

    /**
     * The reference instance of <code>eicn.noticeboard</code>
     */
    public static final Noticeboard NOTICEBOARD = new Noticeboard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeboardRecord> getRecordType() {
        return NoticeboardRecord.class;
    }

    /**
     * The column <code>eicn.noticeboard.seq</code>.
     */
    public final TableField<NoticeboardRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.noticeboard.writer</code>.
     */
    public final TableField<NoticeboardRecord, String> WRITER = createField(DSL.name("writer"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.noticeboard.subject</code>.
     */
    public final TableField<NoticeboardRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.noticeboard.passwd</code>.
     */
    public final TableField<NoticeboardRecord, String> PASSWD = createField(DSL.name("passwd"), org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.noticeboard.reg_date</code>.
     */
    public final TableField<NoticeboardRecord, Timestamp> REG_DATE = createField(DSL.name("reg_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2010-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.noticeboard.ref</code>.
     */
    public final TableField<NoticeboardRecord, Integer> REF = createField(DSL.name("ref"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eicn.noticeboard.re_step</code>.
     */
    public final TableField<NoticeboardRecord, Integer> RE_STEP = createField(DSL.name("re_step"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eicn.noticeboard.re_level</code>.
     */
    public final TableField<NoticeboardRecord, Integer> RE_LEVEL = createField(DSL.name("re_level"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eicn.noticeboard.content</code>.
     */
    public final TableField<NoticeboardRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * Create a <code>eicn.noticeboard</code> table reference
     */
    public Noticeboard() {
        this(DSL.name("noticeboard"), null);
    }

    /**
     * Create an aliased <code>eicn.noticeboard</code> table reference
     */
    public Noticeboard(String alias) {
        this(DSL.name(alias), NOTICEBOARD);
    }

    /**
     * Create an aliased <code>eicn.noticeboard</code> table reference
     */
    public Noticeboard(Name alias) {
        this(alias, NOTICEBOARD);
    }

    private Noticeboard(Name alias, Table<NoticeboardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Noticeboard(Name alias, Table<NoticeboardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Noticeboard(Table<O> child, ForeignKey<O, NoticeboardRecord> key) {
        super(child, key, NOTICEBOARD);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<NoticeboardRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTICEBOARD;
    }

    @Override
    public List<UniqueKey<NoticeboardRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticeboardRecord>>asList(Keys.KEY_NOTICEBOARD_SEQ);
    }

    @Override
    public Noticeboard as(String alias) {
        return new Noticeboard(DSL.name(alias), this);
    }

    @Override
    public Noticeboard as(Name alias) {
        return new Noticeboard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Noticeboard rename(String name) {
        return new Noticeboard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Noticeboard rename(Name name) {
        return new Noticeboard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, Timestamp, Integer, Integer, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
