/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.customdb.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.customdb.Customdb;
import kr.co.eicn.ippbx.meta.jooq.customdb.Indexes;
import kr.co.eicn.ippbx.meta.jooq.customdb.Keys;
import kr.co.eicn.ippbx.meta.jooq.customdb.tables.records.MaindbKeyInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MaindbKeyInfo extends TableImpl<MaindbKeyInfoRecord> {

    private static final long serialVersionUID = -1985574380;

    /**
     * The reference instance of <code>CUSTOMDB.maindb_key_info</code>
     */
    public static final MaindbKeyInfo MAINDB_KEY_INFO = new MaindbKeyInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaindbKeyInfoRecord> getRecordType() {
        return MaindbKeyInfoRecord.class;
    }

    /**
     * The column <code>CUSTOMDB.maindb_key_info.key_value</code>.
     */
    public final TableField<MaindbKeyInfoRecord, String> KEY_VALUE = createField(DSL.name("key_value"), org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_key_info.custom_id</code>.
     */
    public final TableField<MaindbKeyInfoRecord, String> CUSTOM_ID = createField(DSL.name("custom_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.maindb_key_info.group_id</code>.
     */
    public final TableField<MaindbKeyInfoRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>CUSTOMDB.maindb_key_info</code> table reference
     */
    public MaindbKeyInfo() {
        this(DSL.name("maindb_key_info"), null);
    }

    /**
     * Create an aliased <code>CUSTOMDB.maindb_key_info</code> table reference
     */
    public MaindbKeyInfo(String alias) {
        this(DSL.name(alias), MAINDB_KEY_INFO);
    }

    /**
     * Create an aliased <code>CUSTOMDB.maindb_key_info</code> table reference
     */
    public MaindbKeyInfo(Name alias) {
        this(alias, MAINDB_KEY_INFO);
    }

    private MaindbKeyInfo(Name alias, Table<MaindbKeyInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MaindbKeyInfo(Name alias, Table<MaindbKeyInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MaindbKeyInfo(Table<O> child, ForeignKey<O, MaindbKeyInfoRecord> key) {
        super(child, key, MAINDB_KEY_INFO);
    }

    @Override
    public Schema getSchema() {
        return Customdb.CUSTOMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAINDB_KEY_INFO_GROUP_ID, Indexes.MAINDB_KEY_INFO_KEY_VALUE);
    }

    @Override
    public UniqueKey<MaindbKeyInfoRecord> getPrimaryKey() {
        return Keys.KEY_MAINDB_KEY_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<MaindbKeyInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<MaindbKeyInfoRecord>>asList(Keys.KEY_MAINDB_KEY_INFO_PRIMARY);
    }

    @Override
    public MaindbKeyInfo as(String alias) {
        return new MaindbKeyInfo(DSL.name(alias), this);
    }

    @Override
    public MaindbKeyInfo as(Name alias) {
        return new MaindbKeyInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MaindbKeyInfo rename(String name) {
        return new MaindbKeyInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MaindbKeyInfo rename(Name name) {
        return new MaindbKeyInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
