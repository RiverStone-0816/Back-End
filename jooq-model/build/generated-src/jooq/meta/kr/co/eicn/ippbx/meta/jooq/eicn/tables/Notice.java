/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.NoticeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 공지사항
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notice extends TableImpl<NoticeRecord> {

    private static final long serialVersionUID = -1330044577;

    /**
     * The reference instance of <code>eicn.notice</code>
     */
    public static final Notice NOTICE = new Notice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NoticeRecord> getRecordType() {
        return NoticeRecord.class;
    }

    /**
     * The column <code>eicn.notice.id</code>.
     */
    public final TableField<NoticeRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.notice.company_id</code>. 업체 아이디 [join: company_info.company_id]
     */
    public final TableField<NoticeRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "업체 아이디 [join: company_info.company_id]");

    /**
     * The column <code>eicn.notice.title</code>. 제목
     */
    public final TableField<NoticeRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "제목");

    /**
     * The column <code>eicn.notice.content</code>. 내용
     */
    public final TableField<NoticeRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "내용");

    /**
     * The column <code>eicn.notice.creator_id</code>. 유저 [join: person_list.id]
     */
    public final TableField<NoticeRecord, String> CREATOR_ID = createField(DSL.name("creator_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "유저 [join: person_list.id]");

    /**
     * The column <code>eicn.notice.created_at</code>. 레코드 생성 시각
     */
    public final TableField<NoticeRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "레코드 생성 시각");

    /**
     * The column <code>eicn.notice.view_cnt</code>. 조회수
     */
    public final TableField<NoticeRecord, Integer> VIEW_CNT = createField(DSL.name("view_cnt"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "조회수");

    /**
     * Create a <code>eicn.notice</code> table reference
     */
    public Notice() {
        this(DSL.name("notice"), null);
    }

    /**
     * Create an aliased <code>eicn.notice</code> table reference
     */
    public Notice(String alias) {
        this(DSL.name(alias), NOTICE);
    }

    /**
     * Create an aliased <code>eicn.notice</code> table reference
     */
    public Notice(Name alias) {
        this(alias, NOTICE);
    }

    private Notice(Name alias, Table<NoticeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notice(Name alias, Table<NoticeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("공지사항"), TableOptions.table());
    }

    public <O extends Record> Notice(Table<O> child, ForeignKey<O, NoticeRecord> key) {
        super(child, key, NOTICE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<NoticeRecord, Long> getIdentity() {
        return Keys.IDENTITY_NOTICE;
    }

    @Override
    public UniqueKey<NoticeRecord> getPrimaryKey() {
        return Keys.KEY_NOTICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<NoticeRecord>> getKeys() {
        return Arrays.<UniqueKey<NoticeRecord>>asList(Keys.KEY_NOTICE_PRIMARY);
    }

    @Override
    public Notice as(String alias) {
        return new Notice(DSL.name(alias), this);
    }

    @Override
    public Notice as(Name alias) {
        return new Notice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notice rename(String name) {
        return new Notice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notice rename(Name name) {
        return new Notice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, Timestamp, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
