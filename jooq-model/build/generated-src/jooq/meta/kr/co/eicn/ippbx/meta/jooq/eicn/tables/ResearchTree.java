/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ResearchTreeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 설문 시나리오 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResearchTree extends TableImpl<ResearchTreeRecord> {

    private static final long serialVersionUID = 1298421350;

    /**
     * The reference instance of <code>eicn.research_tree</code>
     */
    public static final ResearchTree RESEARCH_TREE = new ResearchTree();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResearchTreeRecord> getRecordType() {
        return ResearchTreeRecord.class;
    }

    /**
     * The column <code>eicn.research_tree.seq</code>. SEQUENCE KEY
     */
    public final TableField<ResearchTreeRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQUENCE KEY");

    /**
     * The column <code>eicn.research_tree.code</code>. {설문아이디}_{시나리오 레벨}_{문항 아이디}_{research_item.mapping_number} 
     */
    public final TableField<ResearchTreeRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "{설문아이디}_{시나리오 레벨}_{문항 아이디}_{research_item.mapping_number} ");

    /**
     * The column <code>eicn.research_tree.path</code>. 윗레벨의 path를 포함한 path의 나열 ex&gt;0-4_1_2_0-4_2_6_1
     */
    public final TableField<ResearchTreeRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 path를 포함한 path의 나열 ex>0-4_1_2_0-4_2_6_1");

    /**
     * The column <code>eicn.research_tree.root</code>. 최상위 트리 path
     */
    public final TableField<ResearchTreeRecord, String> ROOT = createField(DSL.name("root"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "최상위 트리 path");

    /**
     * The column <code>eicn.research_tree.parent</code>. 윗레벨의 path
     */
    public final TableField<ResearchTreeRecord, String> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.VARCHAR(300).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 path");

    /**
     * The column <code>eicn.research_tree.level</code>. 해당 트리의 레벨
     */
    public final TableField<ResearchTreeRecord, Integer> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "해당 트리의 레벨");

    /**
     * The column <code>eicn.research_tree.type</code>.
     */
    public final TableField<ResearchTreeRecord, Byte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>eicn.research_tree.item_id</code>. 문항 아이디
     */
    public final TableField<ResearchTreeRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "문항 아이디");

    /**
     * The column <code>eicn.research_tree.mapping_number</code>. tree index
     */
    public final TableField<ResearchTreeRecord, Byte> MAPPING_NUMBER = createField(DSL.name("mapping_number"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "tree index");

    /**
     * The column <code>eicn.research_tree.research_id</code>. 설문 아이디
     */
    public final TableField<ResearchTreeRecord, Integer> RESEARCH_ID = createField(DSL.name("research_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "설문 아이디");

    /**
     * The column <code>eicn.research_tree.company_id</code>. 고객사 아이디
     */
    public final TableField<ResearchTreeRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * Create a <code>eicn.research_tree</code> table reference
     */
    public ResearchTree() {
        this(DSL.name("research_tree"), null);
    }

    /**
     * Create an aliased <code>eicn.research_tree</code> table reference
     */
    public ResearchTree(String alias) {
        this(DSL.name(alias), RESEARCH_TREE);
    }

    /**
     * Create an aliased <code>eicn.research_tree</code> table reference
     */
    public ResearchTree(Name alias) {
        this(alias, RESEARCH_TREE);
    }

    private ResearchTree(Name alias, Table<ResearchTreeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResearchTree(Name alias, Table<ResearchTreeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("설문 시나리오 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> ResearchTree(Table<O> child, ForeignKey<O, ResearchTreeRecord> key) {
        super(child, key, RESEARCH_TREE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESEARCH_TREE_RESEARCH_ID);
    }

    @Override
    public Identity<ResearchTreeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESEARCH_TREE;
    }

    @Override
    public List<UniqueKey<ResearchTreeRecord>> getKeys() {
        return Arrays.<UniqueKey<ResearchTreeRecord>>asList(Keys.KEY_RESEARCH_TREE_SEQ);
    }

    @Override
    public ResearchTree as(String alias) {
        return new ResearchTree(DSL.name(alias), this);
    }

    @Override
    public ResearchTree as(Name alias) {
        return new ResearchTree(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchTree rename(String name) {
        return new ResearchTree(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchTree rename(Name name) {
        return new ResearchTree(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, String, Integer, Byte, Integer, Byte, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
