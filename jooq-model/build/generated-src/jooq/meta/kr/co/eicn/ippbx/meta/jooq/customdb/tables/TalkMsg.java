/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.customdb.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.customdb.Customdb;
import kr.co.eicn.ippbx.meta.jooq.customdb.Indexes;
import kr.co.eicn.ippbx.meta.jooq.customdb.Keys;
import kr.co.eicn.ippbx.meta.jooq.customdb.tables.records.TalkMsgRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TalkMsg extends TableImpl<TalkMsgRecord> {

    private static final long serialVersionUID = -914720123;

    /**
     * The reference instance of <code>CUSTOMDB.talk_msg</code>
     */
    public static final TalkMsg TALK_MSG = new TalkMsg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TalkMsgRecord> getRecordType() {
        return TalkMsgRecord.class;
    }

    /**
     * The column <code>CUSTOMDB.talk_msg.seq</code>.
     */
    public final TableField<TalkMsgRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.insert_time</code>.
     */
    public final TableField<TalkMsgRecord, Timestamp> INSERT_TIME = createField(DSL.name("insert_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.send_receive</code>.
     */
    public final TableField<TalkMsgRecord, String> SEND_RECEIVE = createField(DSL.name("send_receive"), org.jooq.impl.SQLDataType.CHAR(3).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.company_id</code>.
     */
    public final TableField<TalkMsgRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.userid</code>.
     */
    public final TableField<TalkMsgRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.user_key</code>.
     */
    public final TableField<TalkMsgRecord, String> USER_KEY = createField(DSL.name("user_key"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.sender_key</code>.
     */
    public final TableField<TalkMsgRecord, String> SENDER_KEY = createField(DSL.name("sender_key"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.message_id</code>.
     */
    public final TableField<TalkMsgRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.time</code>.
     */
    public final TableField<TalkMsgRecord, String> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.type</code>.
     */
    public final TableField<TalkMsgRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.content</code>.
     */
    public final TableField<TalkMsgRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(1100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.attachment</code>.
     */
    public final TableField<TalkMsgRecord, String> ATTACHMENT = createField(DSL.name("attachment"), org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.extra</code>.
     */
    public final TableField<TalkMsgRecord, String> EXTRA = createField(DSL.name("extra"), org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.talk_msg.room_id</code>.
     */
    public final TableField<TalkMsgRecord, String> ROOM_ID = createField(DSL.name("room_id"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>CUSTOMDB.talk_msg</code> table reference
     */
    public TalkMsg() {
        this(DSL.name("talk_msg"), null);
    }

    /**
     * Create an aliased <code>CUSTOMDB.talk_msg</code> table reference
     */
    public TalkMsg(String alias) {
        this(DSL.name(alias), TALK_MSG);
    }

    /**
     * Create an aliased <code>CUSTOMDB.talk_msg</code> table reference
     */
    public TalkMsg(Name alias) {
        this(alias, TALK_MSG);
    }

    private TalkMsg(Name alias, Table<TalkMsgRecord> aliased) {
        this(alias, aliased, null);
    }

    private TalkMsg(Name alias, Table<TalkMsgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TalkMsg(Table<O> child, ForeignKey<O, TalkMsgRecord> key) {
        super(child, key, TALK_MSG);
    }

    @Override
    public Schema getSchema() {
        return Customdb.CUSTOMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TALK_MSG_INSERT_TIME, Indexes.TALK_MSG_USER_KEY, Indexes.TALK_MSG_USERID);
    }

    @Override
    public Identity<TalkMsgRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TALK_MSG;
    }

    @Override
    public List<UniqueKey<TalkMsgRecord>> getKeys() {
        return Arrays.<UniqueKey<TalkMsgRecord>>asList(Keys.KEY_TALK_MSG_SEQ);
    }

    @Override
    public TalkMsg as(String alias) {
        return new TalkMsg(DSL.name(alias), this);
    }

    @Override
    public TalkMsg as(Name alias) {
        return new TalkMsg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkMsg rename(String name) {
        return new TalkMsg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkMsg rename(Name name) {
        return new TalkMsg(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Timestamp, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
