/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.PersonCommandListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 상담사 명령어 수행 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonCommandList extends TableImpl<PersonCommandListRecord> {

    private static final long serialVersionUID = 235278466;

    /**
     * The reference instance of <code>eicn.person_command_list</code>
     */
    public static final PersonCommandList PERSON_COMMAND_LIST = new PersonCommandList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonCommandListRecord> getRecordType() {
        return PersonCommandListRecord.class;
    }

    /**
     * The column <code>eicn.person_command_list.seq</code>.
     */
    public final TableField<PersonCommandListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.person_command_list.insert_date</code>. 인서트된시간
     */
    public final TableField<PersonCommandListRecord, Timestamp> INSERT_DATE = createField(DSL.name("insert_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("2016-01-01 01:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "인서트된시간");

    /**
     * The column <code>eicn.person_command_list.userid</code>. user id
     */
    public final TableField<PersonCommandListRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "user id");

    /**
     * The column <code>eicn.person_command_list.peer</code>. peer id
     */
    public final TableField<PersonCommandListRecord, String> PEER = createField(DSL.name("peer"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "peer id");

    /**
     * The column <code>eicn.person_command_list.cmd</code>. cmd id
     */
    public final TableField<PersonCommandListRecord, String> CMD = createField(DSL.name("cmd"), org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "cmd id");

    /**
     * The column <code>eicn.person_command_list.cmd_data</code>. cmd data
     */
    public final TableField<PersonCommandListRecord, String> CMD_DATA = createField(DSL.name("cmd_data"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "cmd data");

    /**
     * The column <code>eicn.person_command_list.company_id</code>. 회사 아이디
     */
    public final TableField<PersonCommandListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "회사 아이디");

    /**
     * Create a <code>eicn.person_command_list</code> table reference
     */
    public PersonCommandList() {
        this(DSL.name("person_command_list"), null);
    }

    /**
     * Create an aliased <code>eicn.person_command_list</code> table reference
     */
    public PersonCommandList(String alias) {
        this(DSL.name(alias), PERSON_COMMAND_LIST);
    }

    /**
     * Create an aliased <code>eicn.person_command_list</code> table reference
     */
    public PersonCommandList(Name alias) {
        this(alias, PERSON_COMMAND_LIST);
    }

    private PersonCommandList(Name alias, Table<PersonCommandListRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonCommandList(Name alias, Table<PersonCommandListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("상담사 명령어 수행 테이블"), TableOptions.table());
    }

    public <O extends Record> PersonCommandList(Table<O> child, ForeignKey<O, PersonCommandListRecord> key) {
        super(child, key, PERSON_COMMAND_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_COMMAND_LIST_CMD, Indexes.PERSON_COMMAND_LIST_COMPANY_ID, Indexes.PERSON_COMMAND_LIST_INSERT_DATE, Indexes.PERSON_COMMAND_LIST_USERID);
    }

    @Override
    public Identity<PersonCommandListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PERSON_COMMAND_LIST;
    }

    @Override
    public List<UniqueKey<PersonCommandListRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonCommandListRecord>>asList(Keys.KEY_PERSON_COMMAND_LIST_SEQ);
    }

    @Override
    public PersonCommandList as(String alias) {
        return new PersonCommandList(DSL.name(alias), this);
    }

    @Override
    public PersonCommandList as(Name alias) {
        return new PersonCommandList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonCommandList rename(String name) {
        return new PersonCommandList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonCommandList rename(Name name) {
        return new PersonCommandList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Timestamp, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
