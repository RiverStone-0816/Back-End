/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.RecordEncKeyRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 녹취암호화정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecordEncKey extends TableImpl<RecordEncKeyRecord> {

    private static final long serialVersionUID = 1663855722;

    /**
     * The reference instance of <code>eicn.record_enc_key</code>
     */
    public static final RecordEncKey RECORD_ENC_KEY = new RecordEncKey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordEncKeyRecord> getRecordType() {
        return RecordEncKeyRecord.class;
    }

    /**
     * The column <code>eicn.record_enc_key.id</code>.
     */
    public final TableField<RecordEncKeyRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.record_enc_key.company_id</code>.
     */
    public final TableField<RecordEncKeyRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.record_enc_key.create_time</code>.
     */
    public final TableField<RecordEncKeyRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.record_enc_key.enc_key</code>.
     */
    public final TableField<RecordEncKeyRecord, String> ENC_KEY = createField(DSL.name("enc_key"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>eicn.record_enc_key</code> table reference
     */
    public RecordEncKey() {
        this(DSL.name("record_enc_key"), null);
    }

    /**
     * Create an aliased <code>eicn.record_enc_key</code> table reference
     */
    public RecordEncKey(String alias) {
        this(DSL.name(alias), RECORD_ENC_KEY);
    }

    /**
     * Create an aliased <code>eicn.record_enc_key</code> table reference
     */
    public RecordEncKey(Name alias) {
        this(alias, RECORD_ENC_KEY);
    }

    private RecordEncKey(Name alias, Table<RecordEncKeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecordEncKey(Name alias, Table<RecordEncKeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("녹취암호화정보"), TableOptions.table());
    }

    public <O extends Record> RecordEncKey(Table<O> child, ForeignKey<O, RecordEncKeyRecord> key) {
        super(child, key, RECORD_ENC_KEY);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<RecordEncKeyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECORD_ENC_KEY;
    }

    @Override
    public UniqueKey<RecordEncKeyRecord> getPrimaryKey() {
        return Keys.KEY_RECORD_ENC_KEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<RecordEncKeyRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordEncKeyRecord>>asList(Keys.KEY_RECORD_ENC_KEY_PRIMARY);
    }

    @Override
    public RecordEncKey as(String alias) {
        return new RecordEncKey(DSL.name(alias), this);
    }

    @Override
    public RecordEncKey as(Name alias) {
        return new RecordEncKey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEncKey rename(String name) {
        return new RecordEncKey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecordEncKey rename(Name name) {
        return new RecordEncKey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Timestamp, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
