/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.SmsRejectRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SmsReject extends TableImpl<SmsRejectRecord> {

    private static final long serialVersionUID = -1446778294;

    /**
     * The reference instance of <code>eicn.sms_reject</code>
     */
    public static final SmsReject SMS_REJECT = new SmsReject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SmsRejectRecord> getRecordType() {
        return SmsRejectRecord.class;
    }

    /**
     * The column <code>eicn.sms_reject.seq</code>.
     */
    public final TableField<SmsRejectRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.sms_reject.input_date</code>.
     */
    public final TableField<SmsRejectRecord, Timestamp> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("2010-01-01 01:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.sms_reject.host</code>.
     */
    public final TableField<SmsRejectRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.sms_reject.reject_number</code>.
     */
    public final TableField<SmsRejectRecord, String> REJECT_NUMBER = createField(DSL.name("reject_number"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.sms_reject.caller_number</code>.
     */
    public final TableField<SmsRejectRecord, String> CALLER_NUMBER = createField(DSL.name("caller_number"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.sms_reject.company_id</code>.
     */
    public final TableField<SmsRejectRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.sms_reject</code> table reference
     */
    public SmsReject() {
        this(DSL.name("sms_reject"), null);
    }

    /**
     * Create an aliased <code>eicn.sms_reject</code> table reference
     */
    public SmsReject(String alias) {
        this(DSL.name(alias), SMS_REJECT);
    }

    /**
     * Create an aliased <code>eicn.sms_reject</code> table reference
     */
    public SmsReject(Name alias) {
        this(alias, SMS_REJECT);
    }

    private SmsReject(Name alias, Table<SmsRejectRecord> aliased) {
        this(alias, aliased, null);
    }

    private SmsReject(Name alias, Table<SmsRejectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SmsReject(Table<O> child, ForeignKey<O, SmsRejectRecord> key) {
        super(child, key, SMS_REJECT);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<SmsRejectRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SMS_REJECT;
    }

    @Override
    public UniqueKey<SmsRejectRecord> getPrimaryKey() {
        return Keys.KEY_SMS_REJECT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SmsRejectRecord>> getKeys() {
        return Arrays.<UniqueKey<SmsRejectRecord>>asList(Keys.KEY_SMS_REJECT_PRIMARY);
    }

    @Override
    public SmsReject as(String alias) {
        return new SmsReject(DSL.name(alias), this);
    }

    @Override
    public SmsReject as(Name alias) {
        return new SmsReject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsReject rename(String name) {
        return new SmsReject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SmsReject rename(Name name) {
        return new SmsReject(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Timestamp, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
