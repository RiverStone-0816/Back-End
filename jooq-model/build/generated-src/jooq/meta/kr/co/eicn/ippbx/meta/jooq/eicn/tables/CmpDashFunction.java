/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CmpDashFunctionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CmpDashFunction extends TableImpl<CmpDashFunctionRecord> {

    private static final long serialVersionUID = -1559064057;

    /**
     * The reference instance of <code>eicn.cmp_dash_function</code>
     */
    public static final CmpDashFunction CMP_DASH_FUNCTION = new CmpDashFunction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CmpDashFunctionRecord> getRecordType() {
        return CmpDashFunctionRecord.class;
    }

    /**
     * The column <code>eicn.cmp_dash_function.seq</code>.
     */
    public final TableField<CmpDashFunctionRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.userid</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.func_seq</code>.
     */
    public final TableField<CmpDashFunctionRecord, Integer> FUNC_SEQ = createField(DSL.name("func_seq"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.func_id</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> FUNC_ID = createField(DSL.name("func_id"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.func_name</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> FUNC_NAME = createField(DSL.name("func_name"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.func_jsp</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> FUNC_JSP = createField(DSL.name("func_jsp"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.is_display</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> IS_DISPLAY = createField(DSL.name("is_display"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.option1</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> OPTION1 = createField(DSL.name("option1"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.option2</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> OPTION2 = createField(DSL.name("option2"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.option3</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> OPTION3 = createField(DSL.name("option3"), org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.size_col</code>.
     */
    public final TableField<CmpDashFunctionRecord, Integer> SIZE_COL = createField(DSL.name("size_col"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.size_height</code>.
     */
    public final TableField<CmpDashFunctionRecord, Integer> SIZE_HEIGHT = createField(DSL.name("size_height"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_dash_function.company_id</code>.
     */
    public final TableField<CmpDashFunctionRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.cmp_dash_function</code> table reference
     */
    public CmpDashFunction() {
        this(DSL.name("cmp_dash_function"), null);
    }

    /**
     * Create an aliased <code>eicn.cmp_dash_function</code> table reference
     */
    public CmpDashFunction(String alias) {
        this(DSL.name(alias), CMP_DASH_FUNCTION);
    }

    /**
     * Create an aliased <code>eicn.cmp_dash_function</code> table reference
     */
    public CmpDashFunction(Name alias) {
        this(alias, CMP_DASH_FUNCTION);
    }

    private CmpDashFunction(Name alias, Table<CmpDashFunctionRecord> aliased) {
        this(alias, aliased, null);
    }

    private CmpDashFunction(Name alias, Table<CmpDashFunctionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CmpDashFunction(Table<O> child, ForeignKey<O, CmpDashFunctionRecord> key) {
        super(child, key, CMP_DASH_FUNCTION);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<CmpDashFunctionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CMP_DASH_FUNCTION;
    }

    @Override
    public List<UniqueKey<CmpDashFunctionRecord>> getKeys() {
        return Arrays.<UniqueKey<CmpDashFunctionRecord>>asList(Keys.KEY_CMP_DASH_FUNCTION_SEQ);
    }

    @Override
    public CmpDashFunction as(String alias) {
        return new CmpDashFunction(DSL.name(alias), this);
    }

    @Override
    public CmpDashFunction as(Name alias) {
        return new CmpDashFunction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CmpDashFunction rename(String name) {
        return new CmpDashFunction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmpDashFunction rename(Name name) {
        return new CmpDashFunction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, Integer, String, String, String, String, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
