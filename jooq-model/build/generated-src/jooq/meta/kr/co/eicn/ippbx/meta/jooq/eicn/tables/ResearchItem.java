/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ResearchItemRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 설문 문항 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResearchItem extends TableImpl<ResearchItemRecord> {

    private static final long serialVersionUID = 1978569484;

    /**
     * The reference instance of <code>eicn.research_item</code>
     */
    public static final ResearchItem RESEARCH_ITEM = new ResearchItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResearchItemRecord> getRecordType() {
        return ResearchItemRecord.class;
    }

    /**
     * The column <code>eicn.research_item.seq</code>. SEQUENCE KEY
     */
    public final TableField<ResearchItemRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "SEQUENCE KEY");

    /**
     * The column <code>eicn.research_item.item_id</code>. 설문 참조 아이디
     */
    public final TableField<ResearchItemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "설문 참조 아이디");

    /**
     * The column <code>eicn.research_item.item_name</code>. 문항명
     */
    public final TableField<ResearchItemRecord, String> ITEM_NAME = createField(DSL.name("item_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "문항명");

    /**
     * The column <code>eicn.research_item.mapping_number</code>. 문항 index
     */
    public final TableField<ResearchItemRecord, Byte> MAPPING_NUMBER = createField(DSL.name("mapping_number"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "문항 index");

    /**
     * The column <code>eicn.research_item.word</code>. 질문
     */
    public final TableField<ResearchItemRecord, String> WORD = createField(DSL.name("word"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "질문");

    /**
     * The column <code>eicn.research_item.sound_kind</code>. 음원구분
     */
    public final TableField<ResearchItemRecord, String> SOUND_KIND = createField(DSL.name("sound_kind"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "음원구분");

    /**
     * The column <code>eicn.research_item.sound_code</code>. 음원 참조 코드
     */
    public final TableField<ResearchItemRecord, Integer> SOUND_CODE = createField(DSL.name("sound_code"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "음원 참조 코드");

    /**
     * The column <code>eicn.research_item.group_code</code>. 같은 group_level 에서 unique한 코드 4자리 ex&gt;0001
     */
    public final TableField<ResearchItemRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "같은 group_level 에서 unique한 코드 4자리 ex>0001");

    /**
     * The column <code>eicn.research_item.group_tree_name</code>. 윗레벨의 코드를 포함한 코드의 나열 ex&gt;0003_0008_0001
     */
    public final TableField<ResearchItemRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "윗레벨의 코드를 포함한 코드의 나열 ex>0003_0008_0001");

    /**
     * The column <code>eicn.research_item.group_level</code>. 해당조직의 레벨 MAX 보다 같거나 작을것
     */
    public final TableField<ResearchItemRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "해당조직의 레벨 MAX 보다 같거나 작을것");

    /**
     * The column <code>eicn.research_item.company_id</code>. 고객사 아이디
     */
    public final TableField<ResearchItemRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * Create a <code>eicn.research_item</code> table reference
     */
    public ResearchItem() {
        this(DSL.name("research_item"), null);
    }

    /**
     * Create an aliased <code>eicn.research_item</code> table reference
     */
    public ResearchItem(String alias) {
        this(DSL.name(alias), RESEARCH_ITEM);
    }

    /**
     * Create an aliased <code>eicn.research_item</code> table reference
     */
    public ResearchItem(Name alias) {
        this(alias, RESEARCH_ITEM);
    }

    private ResearchItem(Name alias, Table<ResearchItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResearchItem(Name alias, Table<ResearchItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("설문 문항 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> ResearchItem(Table<O> child, ForeignKey<O, ResearchItemRecord> key) {
        super(child, key, RESEARCH_ITEM);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESEARCH_ITEM_ITEM_ID);
    }

    @Override
    public Identity<ResearchItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESEARCH_ITEM;
    }

    @Override
    public List<UniqueKey<ResearchItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ResearchItemRecord>>asList(Keys.KEY_RESEARCH_ITEM_SEQ);
    }

    @Override
    public ResearchItem as(String alias) {
        return new ResearchItem(DSL.name(alias), this);
    }

    @Override
    public ResearchItem as(Name alias) {
        return new ResearchItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchItem rename(String name) {
        return new ResearchItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchItem rename(Name name) {
        return new ResearchItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, Byte, String, String, Integer, String, String, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
