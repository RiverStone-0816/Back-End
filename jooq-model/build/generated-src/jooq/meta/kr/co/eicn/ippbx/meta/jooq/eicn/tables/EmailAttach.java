/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.EmailAttachRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailAttach extends TableImpl<EmailAttachRecord> {

    private static final long serialVersionUID = 1191746210;

    /**
     * The reference instance of <code>eicn.email_attach</code>
     */
    public static final EmailAttach EMAIL_ATTACH = new EmailAttach();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailAttachRecord> getRecordType() {
        return EmailAttachRecord.class;
    }

    /**
     * The column <code>eicn.email_attach.seq</code>.
     */
    public final TableField<EmailAttachRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.email_attach.message_id</code>.
     */
    public final TableField<EmailAttachRecord, Integer> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>eicn.email_attach.file_original_name</code>.
     */
    public final TableField<EmailAttachRecord, String> FILE_ORIGINAL_NAME = createField(DSL.name("file_original_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.email_attach.file_saved_name</code>.
     */
    public final TableField<EmailAttachRecord, String> FILE_SAVED_NAME = createField(DSL.name("file_saved_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.email_attach.file_size</code>.
     */
    public final TableField<EmailAttachRecord, Integer> FILE_SIZE = createField(DSL.name("file_size"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.email_attach.file_path</code>.
     */
    public final TableField<EmailAttachRecord, String> FILE_PATH = createField(DSL.name("file_path"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.email_attach.content_id</code>.
     */
    public final TableField<EmailAttachRecord, String> CONTENT_ID = createField(DSL.name("content_id"), org.jooq.impl.SQLDataType.VARCHAR(200).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.email_attach.content_type</code>.
     */
    public final TableField<EmailAttachRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.email_attach.company_id</code>.
     */
    public final TableField<EmailAttachRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.email_attach</code> table reference
     */
    public EmailAttach() {
        this(DSL.name("email_attach"), null);
    }

    /**
     * Create an aliased <code>eicn.email_attach</code> table reference
     */
    public EmailAttach(String alias) {
        this(DSL.name(alias), EMAIL_ATTACH);
    }

    /**
     * Create an aliased <code>eicn.email_attach</code> table reference
     */
    public EmailAttach(Name alias) {
        this(alias, EMAIL_ATTACH);
    }

    private EmailAttach(Name alias, Table<EmailAttachRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailAttach(Name alias, Table<EmailAttachRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EmailAttach(Table<O> child, ForeignKey<O, EmailAttachRecord> key) {
        super(child, key, EMAIL_ATTACH);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_ATTACH_COMPANY_ID, Indexes.EMAIL_ATTACH_MESSAGE_ID);
    }

    @Override
    public Identity<EmailAttachRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMAIL_ATTACH;
    }

    @Override
    public UniqueKey<EmailAttachRecord> getPrimaryKey() {
        return Keys.KEY_EMAIL_ATTACH_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmailAttachRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailAttachRecord>>asList(Keys.KEY_EMAIL_ATTACH_PRIMARY);
    }

    @Override
    public EmailAttach as(String alias) {
        return new EmailAttach(DSL.name(alias), this);
    }

    @Override
    public EmailAttach as(Name alias) {
        return new EmailAttach(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailAttach rename(String name) {
        return new EmailAttach(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailAttach rename(Name name) {
        return new EmailAttach(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, Integer, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
