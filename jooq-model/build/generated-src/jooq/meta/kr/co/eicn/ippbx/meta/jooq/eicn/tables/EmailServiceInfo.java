/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.EmailServiceInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * 이메일설정관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmailServiceInfo extends TableImpl<EmailServiceInfoRecord> {

    private static final long serialVersionUID = 1180125086;

    /**
     * The reference instance of <code>eicn.email_service_info</code>
     */
    public static final EmailServiceInfo EMAIL_SERVICE_INFO = new EmailServiceInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailServiceInfoRecord> getRecordType() {
        return EmailServiceInfoRecord.class;
    }

    /**
     * The column <code>eicn.email_service_info.seq</code>. 시퀀스
     */
    public final TableField<EmailServiceInfoRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "시퀀스");

    /**
     * The column <code>eicn.email_service_info.service_name</code>. 서비스명
     */
    public final TableField<EmailServiceInfoRecord, String> SERVICE_NAME = createField(DSL.name("service_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서비스명");

    /**
     * The column <code>eicn.email_service_info.mail_user_name</code>. 대표메일계정
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_USER_NAME = createField(DSL.name("mail_user_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "대표메일계정");

    /**
     * The column <code>eicn.email_service_info.mail_user_passwd</code>. 메일계정비밀번호
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_USER_PASSWD = createField(DSL.name("mail_user_passwd"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "메일계정비밀번호");

    /**
     * The column <code>eicn.email_service_info.mail_error_notice_email</code>. 에러시알람메일계정
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_ERROR_NOTICE_EMAIL = createField(DSL.name("mail_error_notice_email"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "에러시알람메일계정");

    /**
     * The column <code>eicn.email_service_info.mail_view_email</code>. 보고자하는메일계정
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_VIEW_EMAIL = createField(DSL.name("mail_view_email"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보고자하는메일계정");

    /**
     * The column <code>eicn.email_service_info.mail_protocol</code>. 메일프로토콜
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_PROTOCOL = createField(DSL.name("mail_protocol"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "메일프로토콜");

    /**
     * The column <code>eicn.email_service_info.mail_ssl_yn</code>. 메일SSL여부
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_SSL_YN = createField(DSL.name("mail_ssl_yn"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "메일SSL여부");

    /**
     * The column <code>eicn.email_service_info.mail_host</code>. 메일호스트
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_HOST = createField(DSL.name("mail_host"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "메일호스트");

    /**
     * The column <code>eicn.email_service_info.mail_port</code>. 메일포트
     */
    public final TableField<EmailServiceInfoRecord, UInteger> MAIL_PORT = createField(DSL.name("mail_port"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "메일포트");

    /**
     * The column <code>eicn.email_service_info.mail_attach_path</code>. 첨부저장경로
     */
    public final TableField<EmailServiceInfoRecord, String> MAIL_ATTACH_PATH = createField(DSL.name("mail_attach_path"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "첨부저장경로");

    /**
     * The column <code>eicn.email_service_info.send_auth_conn_type</code>. 암호화된연결방식
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_AUTH_CONN_TYPE = createField(DSL.name("send_auth_conn_type"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "암호화된연결방식");

    /**
     * The column <code>eicn.email_service_info.send_host</code>. 보내는메일호스트
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_HOST = createField(DSL.name("send_host"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보내는메일호스트");

    /**
     * The column <code>eicn.email_service_info.send_port</code>. 보내는메일포트
     */
    public final TableField<EmailServiceInfoRecord, UInteger> SEND_PORT = createField(DSL.name("send_port"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "보내는메일포트");

    /**
     * The column <code>eicn.email_service_info.send_user_name</code>. 보내는메일계정
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_USER_NAME = createField(DSL.name("send_user_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보내는메일계정");

    /**
     * The column <code>eicn.email_service_info.send_user_passwd</code>. 보내는메일계정비밀번호
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_USER_PASSWD = createField(DSL.name("send_user_passwd"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보내는메일계정비밀번호");

    /**
     * The column <code>eicn.email_service_info.send_email</code>. 보내는메일
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_EMAIL = createField(DSL.name("send_email"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보내는메일");

    /**
     * The column <code>eicn.email_service_info.send_email_name</code>. 보내는메일명
     */
    public final TableField<EmailServiceInfoRecord, String> SEND_EMAIL_NAME = createField(DSL.name("send_email_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "보내는메일명");

    /**
     * The column <code>eicn.email_service_info.company_id</code>. 회사아이디
     */
    public final TableField<EmailServiceInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "회사아이디");

    /**
     * Create a <code>eicn.email_service_info</code> table reference
     */
    public EmailServiceInfo() {
        this(DSL.name("email_service_info"), null);
    }

    /**
     * Create an aliased <code>eicn.email_service_info</code> table reference
     */
    public EmailServiceInfo(String alias) {
        this(DSL.name(alias), EMAIL_SERVICE_INFO);
    }

    /**
     * Create an aliased <code>eicn.email_service_info</code> table reference
     */
    public EmailServiceInfo(Name alias) {
        this(alias, EMAIL_SERVICE_INFO);
    }

    private EmailServiceInfo(Name alias, Table<EmailServiceInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmailServiceInfo(Name alias, Table<EmailServiceInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("이메일설정관리 테이블"), TableOptions.table());
    }

    public <O extends Record> EmailServiceInfo(Table<O> child, ForeignKey<O, EmailServiceInfoRecord> key) {
        super(child, key, EMAIL_SERVICE_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_SERVICE_INFO_COMPANY_ID);
    }

    @Override
    public Identity<EmailServiceInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMAIL_SERVICE_INFO;
    }

    @Override
    public UniqueKey<EmailServiceInfoRecord> getPrimaryKey() {
        return Keys.KEY_EMAIL_SERVICE_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<EmailServiceInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailServiceInfoRecord>>asList(Keys.KEY_EMAIL_SERVICE_INFO_PRIMARY);
    }

    @Override
    public EmailServiceInfo as(String alias) {
        return new EmailServiceInfo(DSL.name(alias), this);
    }

    @Override
    public EmailServiceInfo as(Name alias) {
        return new EmailServiceInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailServiceInfo rename(String name) {
        return new EmailServiceInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmailServiceInfo rename(Name name) {
        return new EmailServiceInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Integer, String, String, String, String, String, String, String, String, UInteger, String, String, String, UInteger, String, String, String, String, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
