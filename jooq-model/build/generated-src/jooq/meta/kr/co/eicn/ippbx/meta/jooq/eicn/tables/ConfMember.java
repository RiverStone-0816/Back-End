/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ConfMemberRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfMember extends TableImpl<ConfMemberRecord> {

    private static final long serialVersionUID = 236579476;

    /**
     * The reference instance of <code>eicn.conf_member</code>
     */
    public static final ConfMember CONF_MEMBER = new ConfMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfMemberRecord> getRecordType() {
        return ConfMemberRecord.class;
    }

    /**
     * The column <code>eicn.conf_member.seq</code>.
     */
    public final TableField<ConfMemberRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.conf_member.conf_key</code>.
     */
    public final TableField<ConfMemberRecord, Integer> CONF_KEY = createField(DSL.name("conf_key"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.conf_member.room_number</code>.
     */
    public final TableField<ConfMemberRecord, String> ROOM_NUMBER = createField(DSL.name("room_number"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.member_type</code>.
     */
    public final TableField<ConfMemberRecord, String> MEMBER_TYPE = createField(DSL.name("member_type"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("I", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.member_name</code>.
     */
    public final TableField<ConfMemberRecord, String> MEMBER_NAME = createField(DSL.name("member_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.member_number</code>.
     */
    public final TableField<ConfMemberRecord, String> MEMBER_NUMBER = createField(DSL.name("member_number"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.is_chef</code>.
     */
    public final TableField<ConfMemberRecord, String> IS_CHEF = createField(DSL.name("is_chef"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.is_attended</code>.
     */
    public final TableField<ConfMemberRecord, String> IS_ATTENDED = createField(DSL.name("is_attended"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.conf_member.company_id</code>.
     */
    public final TableField<ConfMemberRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.conf_member</code> table reference
     */
    public ConfMember() {
        this(DSL.name("conf_member"), null);
    }

    /**
     * Create an aliased <code>eicn.conf_member</code> table reference
     */
    public ConfMember(String alias) {
        this(DSL.name(alias), CONF_MEMBER);
    }

    /**
     * Create an aliased <code>eicn.conf_member</code> table reference
     */
    public ConfMember(Name alias) {
        this(alias, CONF_MEMBER);
    }

    private ConfMember(Name alias, Table<ConfMemberRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConfMember(Name alias, Table<ConfMemberRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ConfMember(Table<O> child, ForeignKey<O, ConfMemberRecord> key) {
        super(child, key, CONF_MEMBER);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<ConfMemberRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONF_MEMBER;
    }

    @Override
    public List<UniqueKey<ConfMemberRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfMemberRecord>>asList(Keys.KEY_CONF_MEMBER_SEQ);
    }

    @Override
    public ConfMember as(String alias) {
        return new ConfMember(DSL.name(alias), this);
    }

    @Override
    public ConfMember as(Name alias) {
        return new ConfMember(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfMember rename(String name) {
        return new ConfMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConfMember rename(Name name) {
        return new ConfMember(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
