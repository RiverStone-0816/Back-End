/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.ResearchListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 설문 관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResearchList extends TableImpl<ResearchListRecord> {

    private static final long serialVersionUID = 610859481;

    /**
     * The reference instance of <code>eicn.research_list</code>
     */
    public static final ResearchList RESEARCH_LIST = new ResearchList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResearchListRecord> getRecordType() {
        return ResearchListRecord.class;
    }

    /**
     * The column <code>eicn.research_list.seq</code>.
     */
    public final TableField<ResearchListRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.research_list.regdate</code>. 설문등록일
     */
    public final TableField<ResearchListRecord, Timestamp> REGDATE = createField(DSL.name("regdate"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2015-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "설문등록일");

    /**
     * The column <code>eicn.research_list.research_name</code>. 설문명
     */
    public final TableField<ResearchListRecord, String> RESEARCH_NAME = createField(DSL.name("research_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "설문명");

    /**
     * The column <code>eicn.research_list.research_id</code>. 설무아이디
     */
    public final TableField<ResearchListRecord, Integer> RESEARCH_ID = createField(DSL.name("research_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "설무아이디");

    /**
     * The column <code>eicn.research_list.have_tree</code>. 설문트리유무
     */
    public final TableField<ResearchListRecord, String> HAVE_TREE = createField(DSL.name("have_tree"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "설문트리유무");

    /**
     * The column <code>eicn.research_list.tts_field_name</code>. TTS에서 변수로 들어갈 데이타명(PDS업로드될때의컬럼명과일치)
     */
    public final TableField<ResearchListRecord, String> TTS_FIELD_NAME = createField(DSL.name("tts_field_name"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "TTS에서 변수로 들어갈 데이타명(PDS업로드될때의컬럼명과일치)");

    /**
     * The column <code>eicn.research_list.group_code</code>. 소속코드
     */
    public final TableField<ResearchListRecord, String> GROUP_CODE = createField(DSL.name("group_code"), org.jooq.impl.SQLDataType.CHAR(4).defaultValue(org.jooq.impl.DSL.inline("0000", org.jooq.impl.SQLDataType.CHAR)), this, "소속코드");

    /**
     * The column <code>eicn.research_list.group_tree_name</code>. 소속코드트리명
     */
    public final TableField<ResearchListRecord, String> GROUP_TREE_NAME = createField(DSL.name("group_tree_name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "소속코드트리명");

    /**
     * The column <code>eicn.research_list.group_level</code>. 소속코드레벨
     */
    public final TableField<ResearchListRecord, Integer> GROUP_LEVEL = createField(DSL.name("group_level"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "소속코드레벨");

    /**
     * The column <code>eicn.research_list.company_id</code>. 컴퍼니아이디
     */
    public final TableField<ResearchListRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "컴퍼니아이디");

    /**
     * Create a <code>eicn.research_list</code> table reference
     */
    public ResearchList() {
        this(DSL.name("research_list"), null);
    }

    /**
     * Create an aliased <code>eicn.research_list</code> table reference
     */
    public ResearchList(String alias) {
        this(DSL.name(alias), RESEARCH_LIST);
    }

    /**
     * Create an aliased <code>eicn.research_list</code> table reference
     */
    public ResearchList(Name alias) {
        this(alias, RESEARCH_LIST);
    }

    private ResearchList(Name alias, Table<ResearchListRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResearchList(Name alias, Table<ResearchListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("설문 관리 테이블"), TableOptions.table());
    }

    public <O extends Record> ResearchList(Table<O> child, ForeignKey<O, ResearchListRecord> key) {
        super(child, key, RESEARCH_LIST);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RESEARCH_LIST_REGDATE);
    }

    @Override
    public Identity<ResearchListRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RESEARCH_LIST;
    }

    @Override
    public List<UniqueKey<ResearchListRecord>> getKeys() {
        return Arrays.<UniqueKey<ResearchListRecord>>asList(Keys.KEY_RESEARCH_LIST_SEQ);
    }

    @Override
    public ResearchList as(String alias) {
        return new ResearchList(DSL.name(alias), this);
    }

    @Override
    public ResearchList as(Name alias) {
        return new ResearchList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchList rename(String name) {
        return new ResearchList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResearchList rename(Name name) {
        return new ResearchList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Timestamp, String, Integer, String, String, String, String, Integer, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
