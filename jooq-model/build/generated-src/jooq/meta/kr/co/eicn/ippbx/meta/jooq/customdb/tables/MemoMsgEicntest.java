/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.customdb.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.customdb.Customdb;
import kr.co.eicn.ippbx.meta.jooq.customdb.Indexes;
import kr.co.eicn.ippbx.meta.jooq.customdb.Keys;
import kr.co.eicn.ippbx.meta.jooq.customdb.tables.records.MemoMsgEicntestRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemoMsgEicntest extends TableImpl<MemoMsgEicntestRecord> {

    private static final long serialVersionUID = 978606058;

    /**
     * The reference instance of <code>CUSTOMDB.memo_msg_eicntest</code>
     */
    public static final MemoMsgEicntest MEMO_MSG_EICNTEST = new MemoMsgEicntest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemoMsgEicntestRecord> getRecordType() {
        return MemoMsgEicntestRecord.class;
    }

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.seq</code>.
     */
    public final TableField<MemoMsgEicntestRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.message_id</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.send_userid</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> SEND_USERID = createField(DSL.name("send_userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.receive_userid</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> RECEIVE_USERID = createField(DSL.name("receive_userid"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.insert_time</code>.
     */
    public final TableField<MemoMsgEicntestRecord, Timestamp> INSERT_TIME = createField(DSL.name("insert_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.send_receive</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> SEND_RECEIVE = createField(DSL.name("send_receive"), org.jooq.impl.SQLDataType.CHAR(3).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.read_yn</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> READ_YN = createField(DSL.name("read_yn"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("N", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>CUSTOMDB.memo_msg_eicntest.content</code>.
     */
    public final TableField<MemoMsgEicntestRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.VARCHAR(1100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>CUSTOMDB.memo_msg_eicntest</code> table reference
     */
    public MemoMsgEicntest() {
        this(DSL.name("memo_msg_eicntest"), null);
    }

    /**
     * Create an aliased <code>CUSTOMDB.memo_msg_eicntest</code> table reference
     */
    public MemoMsgEicntest(String alias) {
        this(DSL.name(alias), MEMO_MSG_EICNTEST);
    }

    /**
     * Create an aliased <code>CUSTOMDB.memo_msg_eicntest</code> table reference
     */
    public MemoMsgEicntest(Name alias) {
        this(alias, MEMO_MSG_EICNTEST);
    }

    private MemoMsgEicntest(Name alias, Table<MemoMsgEicntestRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemoMsgEicntest(Name alias, Table<MemoMsgEicntestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MemoMsgEicntest(Table<O> child, ForeignKey<O, MemoMsgEicntestRecord> key) {
        super(child, key, MEMO_MSG_EICNTEST);
    }

    @Override
    public Schema getSchema() {
        return Customdb.CUSTOMDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEMO_MSG_EICNTEST_INSERT_TIME, Indexes.MEMO_MSG_EICNTEST_MESSAGE_ID, Indexes.MEMO_MSG_EICNTEST_RECEIVE_USERID, Indexes.MEMO_MSG_EICNTEST_SEND_USERID);
    }

    @Override
    public Identity<MemoMsgEicntestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEMO_MSG_EICNTEST;
    }

    @Override
    public List<UniqueKey<MemoMsgEicntestRecord>> getKeys() {
        return Arrays.<UniqueKey<MemoMsgEicntestRecord>>asList(Keys.KEY_MEMO_MSG_EICNTEST_SEQ);
    }

    @Override
    public MemoMsgEicntest as(String alias) {
        return new MemoMsgEicntest(DSL.name(alias), this);
    }

    @Override
    public MemoMsgEicntest as(Name alias) {
        return new MemoMsgEicntest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemoMsgEicntest rename(String name) {
        return new MemoMsgEicntest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemoMsgEicntest rename(Name name) {
        return new MemoMsgEicntest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Timestamp, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
