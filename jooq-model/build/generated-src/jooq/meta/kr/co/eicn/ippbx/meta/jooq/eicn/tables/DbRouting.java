/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.DbRoutingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbRouting extends TableImpl<DbRoutingRecord> {

    private static final long serialVersionUID = -1703465813;

    /**
     * The reference instance of <code>eicn.db_routing</code>
     */
    public static final DbRouting DB_ROUTING = new DbRouting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbRoutingRecord> getRecordType() {
        return DbRoutingRecord.class;
    }

    /**
     * The column <code>eicn.db_routing.seq</code>.
     */
    public final TableField<DbRoutingRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.db_routing.ring_date</code>.
     */
    public final TableField<DbRoutingRecord, Timestamp> RING_DATE = createField(DSL.name("ring_date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("2009-07-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>eicn.db_routing.peer</code>.
     */
    public final TableField<DbRoutingRecord, String> PEER = createField(DSL.name("peer"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.db_routing.custom_number</code>.
     */
    public final TableField<DbRoutingRecord, String> CUSTOM_NUMBER = createField(DSL.name("custom_number"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.db_routing.company_id</code>.
     */
    public final TableField<DbRoutingRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.db_routing</code> table reference
     */
    public DbRouting() {
        this(DSL.name("db_routing"), null);
    }

    /**
     * Create an aliased <code>eicn.db_routing</code> table reference
     */
    public DbRouting(String alias) {
        this(DSL.name(alias), DB_ROUTING);
    }

    /**
     * Create an aliased <code>eicn.db_routing</code> table reference
     */
    public DbRouting(Name alias) {
        this(alias, DB_ROUTING);
    }

    private DbRouting(Name alias, Table<DbRoutingRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbRouting(Name alias, Table<DbRoutingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DbRouting(Table<O> child, ForeignKey<O, DbRoutingRecord> key) {
        super(child, key, DB_ROUTING);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DB_ROUTING_CUSTOM_NUMBER, Indexes.DB_ROUTING_RING_DATE);
    }

    @Override
    public Identity<DbRoutingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DB_ROUTING;
    }

    @Override
    public List<UniqueKey<DbRoutingRecord>> getKeys() {
        return Arrays.<UniqueKey<DbRoutingRecord>>asList(Keys.KEY_DB_ROUTING_SEQ);
    }

    @Override
    public DbRouting as(String alias) {
        return new DbRouting(DSL.name(alias), this);
    }

    @Override
    public DbRouting as(Name alias) {
        return new DbRouting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbRouting rename(String name) {
        return new DbRouting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbRouting rename(Name name) {
        return new DbRouting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Timestamp, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
