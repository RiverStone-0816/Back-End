/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.MenuAuthBasicRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MenuAuthBasic extends TableImpl<MenuAuthBasicRecord> {

    private static final long serialVersionUID = 1769855576;

    /**
     * The reference instance of <code>eicn.menu_auth_basic</code>
     */
    public static final MenuAuthBasic MENU_AUTH_BASIC = new MenuAuthBasic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuAuthBasicRecord> getRecordType() {
        return MenuAuthBasicRecord.class;
    }

    /**
     * The column <code>eicn.menu_auth_basic.seq</code>.
     */
    public final TableField<MenuAuthBasicRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.action_exe_id</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> ACTION_EXE_ID = createField(DSL.name("action_exe_id"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.action_name</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> ACTION_NAME = createField(DSL.name("action_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.action_type</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.menu_action_exe_id</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> MENU_ACTION_EXE_ID = createField(DSL.name("menu_action_exe_id"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.auth_type</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> AUTH_TYPE = createField(DSL.name("auth_type"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.group_level_auth_yn</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> GROUP_LEVEL_AUTH_YN = createField(DSL.name("group_level_auth_yn"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.menu_auth_basic.service_kind</code>.
     */
    public final TableField<MenuAuthBasicRecord, String> SERVICE_KIND = createField(DSL.name("service_kind"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>eicn.menu_auth_basic</code> table reference
     */
    public MenuAuthBasic() {
        this(DSL.name("menu_auth_basic"), null);
    }

    /**
     * Create an aliased <code>eicn.menu_auth_basic</code> table reference
     */
    public MenuAuthBasic(String alias) {
        this(DSL.name(alias), MENU_AUTH_BASIC);
    }

    /**
     * Create an aliased <code>eicn.menu_auth_basic</code> table reference
     */
    public MenuAuthBasic(Name alias) {
        this(alias, MENU_AUTH_BASIC);
    }

    private MenuAuthBasic(Name alias, Table<MenuAuthBasicRecord> aliased) {
        this(alias, aliased, null);
    }

    private MenuAuthBasic(Name alias, Table<MenuAuthBasicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MenuAuthBasic(Table<O> child, ForeignKey<O, MenuAuthBasicRecord> key) {
        super(child, key, MENU_AUTH_BASIC);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<MenuAuthBasicRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MENU_AUTH_BASIC;
    }

    @Override
    public List<UniqueKey<MenuAuthBasicRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuAuthBasicRecord>>asList(Keys.KEY_MENU_AUTH_BASIC_SEQ);
    }

    @Override
    public MenuAuthBasic as(String alias) {
        return new MenuAuthBasic(DSL.name(alias), this);
    }

    @Override
    public MenuAuthBasic as(Name alias) {
        return new MenuAuthBasic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuAuthBasic rename(String name) {
        return new MenuAuthBasic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MenuAuthBasic rename(Name name) {
        return new MenuAuthBasic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
