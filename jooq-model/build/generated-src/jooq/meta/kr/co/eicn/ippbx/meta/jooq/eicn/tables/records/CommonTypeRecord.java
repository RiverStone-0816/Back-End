/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables.records;


import kr.co.eicn.ippbx.meta.jooq.eicn.tables.CommonType;

import org.jooq.Field;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.TableRecordImpl;


/**
 * 유형관리 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommonTypeRecord extends TableRecordImpl<CommonTypeRecord> implements Record8<Integer, String, String, String, String, String, String, String> {

    private static final long serialVersionUID = 941818417;

    /**
     * Setter for <code>eicn.common_type.seq</code>.
     */
    public CommonTypeRecord setSeq(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.seq</code>.
     */
    public Integer getSeq() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>eicn.common_type.name</code>. 유형명
     */
    public CommonTypeRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.name</code>. 유형명
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>eicn.common_type.kind</code>. 유형구분
     */
    public CommonTypeRecord setKind(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.kind</code>. 유형구분
     */
    public String getKind() {
        return (String) get(2);
    }

    /**
     * Setter for <code>eicn.common_type.status</code>. 상태값
     */
    public CommonTypeRecord setStatus(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.status</code>. 상태값
     */
    public String getStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>eicn.common_type.etc</code>.
     */
    public CommonTypeRecord setEtc(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.etc</code>.
     */
    public String getEtc() {
        return (String) get(4);
    }

    /**
     * Setter for <code>eicn.common_type.company_id</code>. 고객사 아이디
     */
    public CommonTypeRecord setCompanyId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.company_id</code>. 고객사 아이디
     */
    public String getCompanyId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>eicn.common_type.purpose</code>. 아웃바운드 유형관리 용도구분
PCC: PDS[상담원 연결], PIC:PDS[IVR연결], SVY:설문조사, VDU:VOC[DB업로드], VCS:VOC[상담화면], ADU:ACS[DB업로드], ACS:ACS[상담화면]
     */
    public CommonTypeRecord setPurpose(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.purpose</code>. 아웃바운드 유형관리 용도구분
PCC: PDS[상담원 연결], PIC:PDS[IVR연결], SVY:설문조사, VDU:VOC[DB업로드], VCS:VOC[상담화면], ADU:ACS[DB업로드], ACS:ACS[상담화면]
     */
    public String getPurpose() {
        return (String) get(6);
    }

    /**
     * Setter for <code>eicn.common_type.type</code>. 상담결과 종류
     */
    public CommonTypeRecord setType(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>eicn.common_type.type</code>. 상담결과 종류
     */
    public String getType() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CommonType.COMMON_TYPE.SEQ;
    }

    @Override
    public Field<String> field2() {
        return CommonType.COMMON_TYPE.NAME;
    }

    @Override
    public Field<String> field3() {
        return CommonType.COMMON_TYPE.KIND;
    }

    @Override
    public Field<String> field4() {
        return CommonType.COMMON_TYPE.STATUS;
    }

    @Override
    public Field<String> field5() {
        return CommonType.COMMON_TYPE.ETC;
    }

    @Override
    public Field<String> field6() {
        return CommonType.COMMON_TYPE.COMPANY_ID;
    }

    @Override
    public Field<String> field7() {
        return CommonType.COMMON_TYPE.PURPOSE;
    }

    @Override
    public Field<String> field8() {
        return CommonType.COMMON_TYPE.TYPE;
    }

    @Override
    public Integer component1() {
        return getSeq();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getKind();
    }

    @Override
    public String component4() {
        return getStatus();
    }

    @Override
    public String component5() {
        return getEtc();
    }

    @Override
    public String component6() {
        return getCompanyId();
    }

    @Override
    public String component7() {
        return getPurpose();
    }

    @Override
    public String component8() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getSeq();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getKind();
    }

    @Override
    public String value4() {
        return getStatus();
    }

    @Override
    public String value5() {
        return getEtc();
    }

    @Override
    public String value6() {
        return getCompanyId();
    }

    @Override
    public String value7() {
        return getPurpose();
    }

    @Override
    public String value8() {
        return getType();
    }

    @Override
    public CommonTypeRecord value1(Integer value) {
        setSeq(value);
        return this;
    }

    @Override
    public CommonTypeRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CommonTypeRecord value3(String value) {
        setKind(value);
        return this;
    }

    @Override
    public CommonTypeRecord value4(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public CommonTypeRecord value5(String value) {
        setEtc(value);
        return this;
    }

    @Override
    public CommonTypeRecord value6(String value) {
        setCompanyId(value);
        return this;
    }

    @Override
    public CommonTypeRecord value7(String value) {
        setPurpose(value);
        return this;
    }

    @Override
    public CommonTypeRecord value8(String value) {
        setType(value);
        return this;
    }

    @Override
    public CommonTypeRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommonTypeRecord
     */
    public CommonTypeRecord() {
        super(CommonType.COMMON_TYPE);
    }

    /**
     * Create a detached, initialised CommonTypeRecord
     */
    public CommonTypeRecord(Integer seq, String name, String kind, String status, String etc, String companyId, String purpose, String type) {
        super(CommonType.COMMON_TYPE);

        set(0, seq);
        set(1, name);
        set(2, kind);
        set(3, status);
        set(4, etc);
        set(5, companyId);
        set(6, purpose);
        set(7, type);
    }
}
