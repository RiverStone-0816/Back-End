/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CompanyServerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 고객사 서버 정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyServer extends TableImpl<CompanyServerRecord> {

    private static final long serialVersionUID = 331130806;

    /**
     * The reference instance of <code>eicn.company_server</code>
     */
    public static final CompanyServer COMPANY_SERVER = new CompanyServer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyServerRecord> getRecordType() {
        return CompanyServerRecord.class;
    }

    /**
     * The column <code>eicn.company_server.seq</code>. AUTO_INCREMENT
     */
    public final TableField<CompanyServerRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "AUTO_INCREMENT");

    /**
     * The column <code>eicn.company_server.company_id</code>. 고객사 아이디
     */
    public final TableField<CompanyServerRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "고객사 아이디");

    /**
     * The column <code>eicn.company_server.host</code>. 서버 host-server_info 테이블 host 컬럼
     */
    public final TableField<CompanyServerRecord, String> HOST = createField(DSL.name("host"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "서버 host-server_info 테이블 host 컬럼");

    /**
     * The column <code>eicn.company_server.type</code>. 서버 type-server_info 테이블 type컬럼
     */
    public final TableField<CompanyServerRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("P", org.jooq.impl.SQLDataType.CHAR)), this, "서버 type-server_info 테이블 type컬럼");

    /**
     * The column <code>eicn.company_server.is_use</code>. 사용여부
     */
    public final TableField<CompanyServerRecord, String> IS_USE = createField(DSL.name("is_use"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "사용여부");

    /**
     * Create a <code>eicn.company_server</code> table reference
     */
    public CompanyServer() {
        this(DSL.name("company_server"), null);
    }

    /**
     * Create an aliased <code>eicn.company_server</code> table reference
     */
    public CompanyServer(String alias) {
        this(DSL.name(alias), COMPANY_SERVER);
    }

    /**
     * Create an aliased <code>eicn.company_server</code> table reference
     */
    public CompanyServer(Name alias) {
        this(alias, COMPANY_SERVER);
    }

    private CompanyServer(Name alias, Table<CompanyServerRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyServer(Name alias, Table<CompanyServerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("고객사 서버 정보"), TableOptions.table());
    }

    public <O extends Record> CompanyServer(Table<O> child, ForeignKey<O, CompanyServerRecord> key) {
        super(child, key, COMPANY_SERVER);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMPANY_SERVER_COMPANY_ID);
    }

    @Override
    public Identity<CompanyServerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_SERVER;
    }

    @Override
    public List<UniqueKey<CompanyServerRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyServerRecord>>asList(Keys.KEY_COMPANY_SERVER_SEQ);
    }

    @Override
    public CompanyServer as(String alias) {
        return new CompanyServer(DSL.name(alias), this);
    }

    @Override
    public CompanyServer as(Name alias) {
        return new CompanyServer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyServer rename(String name) {
        return new CompanyServer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyServer rename(Name name) {
        return new CompanyServer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
