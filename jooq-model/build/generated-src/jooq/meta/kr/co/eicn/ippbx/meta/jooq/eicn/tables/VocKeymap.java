/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.VocKeymapRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VocKeymap extends TableImpl<VocKeymapRecord> {

    private static final long serialVersionUID = 78400097;

    /**
     * The reference instance of <code>eicn.voc_keymap</code>
     */
    public static final VocKeymap VOC_KEYMAP = new VocKeymap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VocKeymapRecord> getRecordType() {
        return VocKeymapRecord.class;
    }

    /**
     * The column <code>eicn.voc_keymap.seq</code>.
     */
    public final TableField<VocKeymapRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.voc_keymap.button</code>.
     */
    public final TableField<VocKeymapRecord, String> BUTTON = createField(DSL.name("button"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.voc_keymap.name</code>.
     */
    public final TableField<VocKeymapRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.voc_keymap.parent</code>.
     */
    public final TableField<VocKeymapRecord, Integer> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.voc_keymap.child</code>.
     */
    public final TableField<VocKeymapRecord, Integer> CHILD = createField(DSL.name("child"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.voc_keymap.company_id</code>.
     */
    public final TableField<VocKeymapRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.voc_keymap</code> table reference
     */
    public VocKeymap() {
        this(DSL.name("voc_keymap"), null);
    }

    /**
     * Create an aliased <code>eicn.voc_keymap</code> table reference
     */
    public VocKeymap(String alias) {
        this(DSL.name(alias), VOC_KEYMAP);
    }

    /**
     * Create an aliased <code>eicn.voc_keymap</code> table reference
     */
    public VocKeymap(Name alias) {
        this(alias, VOC_KEYMAP);
    }

    private VocKeymap(Name alias, Table<VocKeymapRecord> aliased) {
        this(alias, aliased, null);
    }

    private VocKeymap(Name alias, Table<VocKeymapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> VocKeymap(Table<O> child, ForeignKey<O, VocKeymapRecord> key) {
        super(child, key, VOC_KEYMAP);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOC_KEYMAP_COMPANY_ID, Indexes.VOC_KEYMAP_PARENT);
    }

    @Override
    public Identity<VocKeymapRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VOC_KEYMAP;
    }

    @Override
    public UniqueKey<VocKeymapRecord> getPrimaryKey() {
        return Keys.KEY_VOC_KEYMAP_PRIMARY;
    }

    @Override
    public List<UniqueKey<VocKeymapRecord>> getKeys() {
        return Arrays.<UniqueKey<VocKeymapRecord>>asList(Keys.KEY_VOC_KEYMAP_PRIMARY);
    }

    @Override
    public VocKeymap as(String alias) {
        return new VocKeymap(DSL.name(alias), this);
    }

    @Override
    public VocKeymap as(Name alias) {
        return new VocKeymap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VocKeymap rename(String name) {
        return new VocKeymap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VocKeymap rename(Name name) {
        return new VocKeymap(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
