/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.TalkMentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TalkMent extends TableImpl<TalkMentRecord> {

    private static final long serialVersionUID = 580443776;

    /**
     * The reference instance of <code>eicn.talk_ment</code>
     */
    public static final TalkMent TALK_MENT = new TalkMent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TalkMentRecord> getRecordType() {
        return TalkMentRecord.class;
    }

    /**
     * The column <code>eicn.talk_ment.seq</code>.
     */
    public final TableField<TalkMentRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.talk_ment.ment_name</code>.
     */
    public final TableField<TalkMentRecord, String> MENT_NAME = createField(DSL.name("ment_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.talk_ment.ment</code>.
     */
    public final TableField<TalkMentRecord, String> MENT = createField(DSL.name("ment"), org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.talk_ment.company_id</code>.
     */
    public final TableField<TalkMentRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.talk_ment</code> table reference
     */
    public TalkMent() {
        this(DSL.name("talk_ment"), null);
    }

    /**
     * Create an aliased <code>eicn.talk_ment</code> table reference
     */
    public TalkMent(String alias) {
        this(DSL.name(alias), TALK_MENT);
    }

    /**
     * Create an aliased <code>eicn.talk_ment</code> table reference
     */
    public TalkMent(Name alias) {
        this(alias, TALK_MENT);
    }

    private TalkMent(Name alias, Table<TalkMentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TalkMent(Name alias, Table<TalkMentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TalkMent(Table<O> child, ForeignKey<O, TalkMentRecord> key) {
        super(child, key, TALK_MENT);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<TalkMentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TALK_MENT;
    }

    @Override
    public List<UniqueKey<TalkMentRecord>> getKeys() {
        return Arrays.<UniqueKey<TalkMentRecord>>asList(Keys.KEY_TALK_MENT_SEQ);
    }

    @Override
    public TalkMent as(String alias) {
        return new TalkMent(DSL.name(alias), this);
    }

    @Override
    public TalkMent as(Name alias) {
        return new TalkMent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkMent rename(String name) {
        return new TalkMent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TalkMent rename(Name name) {
        return new TalkMent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
