/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.IpccTableMngRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IpccTableMng extends TableImpl<IpccTableMngRecord> {

    private static final long serialVersionUID = -1097534861;

    /**
     * The reference instance of <code>eicn.ipcc_table_mng</code>
     */
    public static final IpccTableMng IPCC_TABLE_MNG = new IpccTableMng();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IpccTableMngRecord> getRecordType() {
        return IpccTableMngRecord.class;
    }

    /**
     * The column <code>eicn.ipcc_table_mng.table_id</code>.
     */
    public final TableField<IpccTableMngRecord, String> TABLE_ID = createField(DSL.name("table_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ipcc_table_mng.use_server_kind</code>.
     */
    public final TableField<IpccTableMngRecord, String> USE_SERVER_KIND = createField(DSL.name("use_server_kind"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ipcc_table_mng.pbx_have_company</code>.
     */
    public final TableField<IpccTableMngRecord, String> PBX_HAVE_COMPANY = createField(DSL.name("pbx_have_company"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("Y", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.ipcc_table_mng.info</code>.
     */
    public final TableField<IpccTableMngRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.ipcc_table_mng.is_backup</code>.
     */
    public final TableField<IpccTableMngRecord, String> IS_BACKUP = createField(DSL.name("is_backup"), org.jooq.impl.SQLDataType.CHAR(1).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>eicn.ipcc_table_mng</code> table reference
     */
    public IpccTableMng() {
        this(DSL.name("ipcc_table_mng"), null);
    }

    /**
     * Create an aliased <code>eicn.ipcc_table_mng</code> table reference
     */
    public IpccTableMng(String alias) {
        this(DSL.name(alias), IPCC_TABLE_MNG);
    }

    /**
     * Create an aliased <code>eicn.ipcc_table_mng</code> table reference
     */
    public IpccTableMng(Name alias) {
        this(alias, IPCC_TABLE_MNG);
    }

    private IpccTableMng(Name alias, Table<IpccTableMngRecord> aliased) {
        this(alias, aliased, null);
    }

    private IpccTableMng(Name alias, Table<IpccTableMngRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> IpccTableMng(Table<O> child, ForeignKey<O, IpccTableMngRecord> key) {
        super(child, key, IPCC_TABLE_MNG);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<UniqueKey<IpccTableMngRecord>> getKeys() {
        return Arrays.<UniqueKey<IpccTableMngRecord>>asList(Keys.KEY_IPCC_TABLE_MNG_TABLE_ID);
    }

    @Override
    public IpccTableMng as(String alias) {
        return new IpccTableMng(DSL.name(alias), this);
    }

    @Override
    public IpccTableMng as(Name alias) {
        return new IpccTableMng(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IpccTableMng rename(String name) {
        return new IpccTableMng(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IpccTableMng rename(Name name) {
        return new IpccTableMng(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
