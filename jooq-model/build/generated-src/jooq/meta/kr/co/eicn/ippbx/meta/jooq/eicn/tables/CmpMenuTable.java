/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Indexes;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.CmpMenuTableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CmpMenuTable extends TableImpl<CmpMenuTableRecord> {

    private static final long serialVersionUID = -1480163275;

    /**
     * The reference instance of <code>eicn.cmp_menu_table</code>
     */
    public static final CmpMenuTable CMP_MENU_TABLE = new CmpMenuTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CmpMenuTableRecord> getRecordType() {
        return CmpMenuTableRecord.class;
    }

    /**
     * The column <code>eicn.cmp_menu_table.seq</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> SEQ = createField(DSL.name("seq"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.base_menuid</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> BASE_MENUID = createField(DSL.name("base_menuid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.menuid</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> MENUID = createField(DSL.name("menuid"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.groupcode</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> GROUPCODE = createField(DSL.name("groupcode"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.parent</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.level</code>.
     */
    public final TableField<CmpMenuTableRecord, Byte> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.menuname</code>.
     */
    public final TableField<CmpMenuTableRecord, String> MENUNAME = createField(DSL.name("menuname"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.menujsp</code>.
     */
    public final TableField<CmpMenuTableRecord, String> MENUJSP = createField(DSL.name("menujsp"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.sequence</code>.
     */
    public final TableField<CmpMenuTableRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.enable</code>.
     */
    public final TableField<CmpMenuTableRecord, String> ENABLE = createField(DSL.name("enable"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("E", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.auth</code>.
     */
    public final TableField<CmpMenuTableRecord, String> AUTH = createField(DSL.name("auth"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.icon</code>.
     */
    public final TableField<CmpMenuTableRecord, String> ICON = createField(DSL.name("icon"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.company_id</code>.
     */
    public final TableField<CmpMenuTableRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>eicn.cmp_menu_table.service</code>.
     */
    public final TableField<CmpMenuTableRecord, String> SERVICE = createField(DSL.name("service"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.cmp_menu_table</code> table reference
     */
    public CmpMenuTable() {
        this(DSL.name("cmp_menu_table"), null);
    }

    /**
     * Create an aliased <code>eicn.cmp_menu_table</code> table reference
     */
    public CmpMenuTable(String alias) {
        this(DSL.name(alias), CMP_MENU_TABLE);
    }

    /**
     * Create an aliased <code>eicn.cmp_menu_table</code> table reference
     */
    public CmpMenuTable(Name alias) {
        this(alias, CMP_MENU_TABLE);
    }

    private CmpMenuTable(Name alias, Table<CmpMenuTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private CmpMenuTable(Name alias, Table<CmpMenuTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CmpMenuTable(Table<O> child, ForeignKey<O, CmpMenuTableRecord> key) {
        super(child, key, CMP_MENU_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CMP_MENU_TABLE_COMPANY_ID, Indexes.CMP_MENU_TABLE_PARENT);
    }

    @Override
    public Identity<CmpMenuTableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CMP_MENU_TABLE;
    }

    @Override
    public UniqueKey<CmpMenuTableRecord> getPrimaryKey() {
        return Keys.KEY_CMP_MENU_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CmpMenuTableRecord>> getKeys() {
        return Arrays.<UniqueKey<CmpMenuTableRecord>>asList(Keys.KEY_CMP_MENU_TABLE_PRIMARY);
    }

    @Override
    public CmpMenuTable as(String alias) {
        return new CmpMenuTable(DSL.name(alias), this);
    }

    @Override
    public CmpMenuTable as(Name alias) {
        return new CmpMenuTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CmpMenuTable rename(String name) {
        return new CmpMenuTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CmpMenuTable rename(Name name) {
        return new CmpMenuTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Integer, Integer, Integer, Byte, String, String, Integer, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
