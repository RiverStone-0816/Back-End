/*
 * This file is generated by jOOQ.
 */
package kr.co.eicn.ippbx.meta.jooq.eicn.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import kr.co.eicn.ippbx.meta.jooq.eicn.Eicn;
import kr.co.eicn.ippbx.meta.jooq.eicn.Keys;
import kr.co.eicn.ippbx.meta.jooq.eicn.tables.records.BoardInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BoardInfo extends TableImpl<BoardInfoRecord> {

    private static final long serialVersionUID = -665714600;

    /**
     * The reference instance of <code>eicn.board_info</code>
     */
    public static final BoardInfo BOARD_INFO = new BoardInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoardInfoRecord> getRecordType() {
        return BoardInfoRecord.class;
    }

    /**
     * The column <code>eicn.board_info.id</code>.
     */
    public final TableField<BoardInfoRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>eicn.board_info.creator_id</code>. 작성자
     */
    public final TableField<BoardInfoRecord, String> CREATOR_ID = createField(DSL.name("creator_id"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "작성자");

    /**
     * The column <code>eicn.board_info.title</code>. 제목
     */
    public final TableField<BoardInfoRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "제목");

    /**
     * The column <code>eicn.board_info.content</code>. 내용
     */
    public final TableField<BoardInfoRecord, String> CONTENT = createField(DSL.name("content"), org.jooq.impl.SQLDataType.CLOB, this, "내용");

    /**
     * The column <code>eicn.board_info.board_type</code>. 종류
     */
    public final TableField<BoardInfoRecord, String> BOARD_TYPE = createField(DSL.name("board_type"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "종류");

    /**
     * The column <code>eicn.board_info.created_at</code>. 등록일
     */
    public final TableField<BoardInfoRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "등록일");

    /**
     * The column <code>eicn.board_info.view_cnt</code>. 조회수
     */
    public final TableField<BoardInfoRecord, Integer> VIEW_CNT = createField(DSL.name("view_cnt"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "조회수");

    /**
     * The column <code>eicn.board_info.notice_type</code>. 공지등록
     */
    public final TableField<BoardInfoRecord, String> NOTICE_TYPE = createField(DSL.name("notice_type"), org.jooq.impl.SQLDataType.CHAR(1), this, "공지등록");

    /**
     * The column <code>eicn.board_info.company_id</code>.
     */
    public final TableField<BoardInfoRecord, String> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>eicn.board_info</code> table reference
     */
    public BoardInfo() {
        this(DSL.name("board_info"), null);
    }

    /**
     * Create an aliased <code>eicn.board_info</code> table reference
     */
    public BoardInfo(String alias) {
        this(DSL.name(alias), BOARD_INFO);
    }

    /**
     * Create an aliased <code>eicn.board_info</code> table reference
     */
    public BoardInfo(Name alias) {
        this(alias, BOARD_INFO);
    }

    private BoardInfo(Name alias, Table<BoardInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private BoardInfo(Name alias, Table<BoardInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BoardInfo(Table<O> child, ForeignKey<O, BoardInfoRecord> key) {
        super(child, key, BOARD_INFO);
    }

    @Override
    public Schema getSchema() {
        return Eicn.EICN;
    }

    @Override
    public Identity<BoardInfoRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOARD_INFO;
    }

    @Override
    public UniqueKey<BoardInfoRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<BoardInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<BoardInfoRecord>>asList(Keys.KEY_BOARD_INFO_PRIMARY);
    }

    @Override
    public BoardInfo as(String alias) {
        return new BoardInfo(DSL.name(alias), this);
    }

    @Override
    public BoardInfo as(Name alias) {
        return new BoardInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardInfo rename(String name) {
        return new BoardInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BoardInfo rename(Name name) {
        return new BoardInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, Timestamp, Integer, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
